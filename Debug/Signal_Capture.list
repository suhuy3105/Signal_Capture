
Signal_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005490  08005490  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005490  08005490  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005490  08005490  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000074  0800550c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800550c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd5  00000000  00000000  0002d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00030320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d1  00000000  00000000  00030f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef4f  00000000  00000000  00049719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088520  00000000  00000000  00058668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  000e0bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080051b8 	.word	0x080051b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080051b8 	.word	0x080051b8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2iz>:
 8000e48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e50:	d30f      	bcc.n	8000e72 <__aeabi_f2iz+0x2a>
 8000e52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d90d      	bls.n	8000e78 <__aeabi_f2iz+0x30>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	bf18      	it	ne
 8000e6e:	4240      	negne	r0, r0
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2iz+0x3a>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d105      	bne.n	8000e8e <__aeabi_f2iz+0x46>
 8000e82:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e8c:	4770      	bx	lr
 8000e8e:	f04f 0000 	mov.w	r0, #0
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_f2uiz>:
 8000e94:	0042      	lsls	r2, r0, #1
 8000e96:	d20e      	bcs.n	8000eb6 <__aeabi_f2uiz+0x22>
 8000e98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e9c:	d30b      	bcc.n	8000eb6 <__aeabi_f2uiz+0x22>
 8000e9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ea2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ea6:	d409      	bmi.n	8000ebc <__aeabi_f2uiz+0x28>
 8000ea8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	4770      	bx	lr
 8000ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_f2uiz+0x32>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d102      	bne.n	8000ecc <__aeabi_f2uiz+0x38>
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eca:	4770      	bx	lr
 8000ecc:	f04f 0000 	mov.w	r0, #0
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <DWT_Delay_Init+0x58>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <DWT_Delay_Init+0x58>)
 8000ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ee2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <DWT_Delay_Init+0x58>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <DWT_Delay_Init+0x58>)
 8000eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eee:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <DWT_Delay_Init+0x5c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <DWT_Delay_Init+0x5c>)
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <DWT_Delay_Init+0x5c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <DWT_Delay_Init+0x5c>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <DWT_Delay_Init+0x5c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f0e:	bf00      	nop
     __ASM volatile ("NOP");
 8000f10:	bf00      	nop
     __ASM volatile ("NOP");
 8000f12:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <DWT_Delay_Init+0x5c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e000      	b.n	8000f22 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f20:	2301      	movs	r3, #1
  }
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000edf0 	.word	0xe000edf0
 8000f30:	e0001000 	.word	0xe0001000

08000f34 <main>:

/* USER CODE END PFP */


int main(void)
{
 8000f34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f38:	b088      	sub	sp, #32
 8000f3a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 f9c4 	bl	80022c8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f8aa 	bl	8001098 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 f972 	bl	800122c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f48:	f000 f8e2 	bl	8001110 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f4c:	f000 f90e 	bl	800116c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f50:	f000 f942 	bl	80011d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	init_serial(&huart1);
 8000f54:	4845      	ldr	r0, [pc, #276]	; (800106c <main+0x138>)
 8000f56:	f000 ff9b 	bl	8001e90 <init_serial>
	printf("###########4\n\r");
 8000f5a:	4845      	ldr	r0, [pc, #276]	; (8001070 <main+0x13c>)
 8000f5c:	f003 f998 	bl	8004290 <iprintf>

	//Init rf driver
	rf_begin(&hspi1, GFSK_1_2_kb, MHz434, CS_GPIO_Port, CS_Pin, GDO0_Pin);
 8000f60:	2301      	movs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2302      	movs	r3, #2
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4b42      	ldr	r3, [pc, #264]	; (8001074 <main+0x140>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4842      	ldr	r0, [pc, #264]	; (8001078 <main+0x144>)
 8000f70:	f000 f9f0 	bl	8001354 <rf_begin>
	//rf_set_carrier_offset(0x4b);
	//check if idle
	rf_sidle();
 8000f74:	f000 fc1e 	bl	80017b4 <rf_sidle>
	uint8_t result = rf_read_register(MARCSTATE);
 8000f78:	20f5      	movs	r0, #245	; 0xf5
 8000f7a:	f000 feae 	bl	8001cda <rf_read_register>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	75bb      	strb	r3, [r7, #22]
	printf("rresult %#02x (Should be 0x01)\n\r", result);
 8000f82:	7dbb      	ldrb	r3, [r7, #22]
 8000f84:	4619      	mov	r1, r3
 8000f86:	483d      	ldr	r0, [pc, #244]	; (800107c <main+0x148>)
 8000f88:	f003 f982 	bl	8004290 <iprintf>


	rf_set_carrier_frequency(433.98);
 8000f8c:	483c      	ldr	r0, [pc, #240]	; (8001080 <main+0x14c>)
 8000f8e:	f000 fb9f 	bl	80016d0 <rf_set_carrier_frequency>
	rf_set_carrier_offset(-200);
 8000f92:	483c      	ldr	r0, [pc, #240]	; (8001084 <main+0x150>)
 8000f94:	f000 fb74 	bl	8001680 <rf_set_carrier_offset>


	FRAMESTATUS_TypeDef status;
   uint16_t len = (1<<16)-1;
 8000f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9c:	813b      	strh	r3, [r7, #8]
   uint8_t buffer[len];
 8000f9e:	8939      	ldrh	r1, [r7, #8]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	b28b      	uxth	r3, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4698      	mov	r8, r3
 8000fac:	4691      	mov	r9, r2
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fc2:	b28b      	uxth	r3, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	461c      	mov	r4, r3
 8000fc8:	4615      	mov	r5, r2
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	00eb      	lsls	r3, r5, #3
 8000fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fd8:	00e2      	lsls	r2, r4, #3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	3307      	adds	r3, #7
 8000fde:	08db      	lsrs	r3, r3, #3
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	ebad 0d03 	sub.w	sp, sp, r3
 8000fe6:	ab02      	add	r3, sp, #8
 8000fe8:	3300      	adds	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
   uint8_t lqi;
   uint8_t rssi;
   rf_receive();
 8000fec:	f000 fbfa 	bl	80017e4 <rf_receive>
   uint8_t counter = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75fb      	strb	r3, [r7, #23]
   while(1){
  	if(rf_incoming_packet()){
 8000ff4:	f000 fc18 	bl	8001828 <rf_incoming_packet>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0fa      	beq.n	8000ff4 <main+0xc0>
  		printf("PACKET %d FOUND\n\r", counter);
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4619      	mov	r1, r3
 8001002:	4821      	ldr	r0, [pc, #132]	; (8001088 <main+0x154>)
 8001004:	f003 f944 	bl	8004290 <iprintf>
  		len = (1<<16)-1;
 8001008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100c:	813b      	strh	r3, [r7, #8]
  		status = receive_frame(buffer, &len, 0, 16, &lqi, &rssi);
 800100e:	f107 0108 	add.w	r1, r7, #8
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2310      	movs	r3, #16
 800101c:	2200      	movs	r2, #0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 fcd0 	bl	80019c4 <receive_frame>
 8001024:	4603      	mov	r3, r0
 8001026:	72fb      	strb	r3, [r7, #11]
  		if(status==FRAME_OK){
 8001028:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d105      	bne.n	800103c <main+0x108>
  			printf("%d CRC OK\n\r", len);
 8001030:	893b      	ldrh	r3, [r7, #8]
 8001032:	4619      	mov	r1, r3
 8001034:	4815      	ldr	r0, [pc, #84]	; (800108c <main+0x158>)
 8001036:	f003 f92b 	bl	8004290 <iprintf>
 800103a:	e00e      	b.n	800105a <main+0x126>
  		}else if(status==FRAME_BAD){
 800103c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <main+0x11c>
  			printf("%d BAD CRC\n\r", len);
 8001044:	893b      	ldrh	r3, [r7, #8]
 8001046:	4619      	mov	r1, r3
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <main+0x15c>)
 800104a:	f003 f921 	bl	8004290 <iprintf>
 800104e:	e004      	b.n	800105a <main+0x126>
  		}else{
  			printf("%d TIMEOUT\n\r", len);
 8001050:	893b      	ldrh	r3, [r7, #8]
 8001052:	4619      	mov	r1, r3
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <main+0x160>)
 8001056:	f003 f91b 	bl	8004290 <iprintf>
  		}
  		rf_write_strobe(SFRX);
 800105a:	203a      	movs	r0, #58	; 0x3a
 800105c:	f000 fe2c 	bl	8001cb8 <rf_write_strobe>
  		//printf("CRC: %d, LQI: %d, RSSI: %d, LEN: %d\n\r", crc, lqi, rssi, len);
  		rf_receive();
 8001060:	f000 fbc0 	bl	80017e4 <rf_receive>
  		counter++;
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	3301      	adds	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
  	if(rf_incoming_packet()){
 800106a:	e7c3      	b.n	8000ff4 <main+0xc0>
 800106c:	2000013c 	.word	0x2000013c
 8001070:	080051d0 	.word	0x080051d0
 8001074:	40010800 	.word	0x40010800
 8001078:	200000e4 	.word	0x200000e4
 800107c:	080051e0 	.word	0x080051e0
 8001080:	43d8fd71 	.word	0x43d8fd71
 8001084:	c3480000 	.word	0xc3480000
 8001088:	08005204 	.word	0x08005204
 800108c:	08005218 	.word	0x08005218
 8001090:	08005224 	.word	0x08005224
 8001094:	08005234 	.word	0x08005234

08001098 <SystemClock_Config>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b090      	sub	sp, #64	; 0x40
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 f8ea 	bl	8004280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010be:	2301      	movs	r3, #1
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c2:	2310      	movs	r3, #16
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fd44 	bl	8002b5c <HAL_RCC_OscConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010da:	f000 f911 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010de:	230f      	movs	r3, #15
 80010e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 ffb2 	bl	8003060 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001102:	f000 f8fd 	bl	8001300 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3740      	adds	r7, #64	; 0x40
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C1_Init+0x50>)
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <MX_I2C1_Init+0x54>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C1_Init+0x50>)
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_I2C1_Init+0x58>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_I2C1_Init+0x50>)
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_I2C1_Init+0x50>)
 800114e:	f001 fbc1 	bl	80028d4 <HAL_I2C_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f000 f8d2 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000090 	.word	0x20000090
 8001164:	40005400 	.word	0x40005400
 8001168:	000186a0 	.word	0x000186a0

0800116c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <MX_SPI1_Init+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800117c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011b8:	220a      	movs	r2, #10
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011be:	f002 f8dd 	bl	800337c <HAL_SPI_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c8:	f000 f89a 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000e4 	.word	0x200000e4
 80011d4:	40013000 	.word	0x40013000

080011d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART1_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001210:	f002 fe3c 	bl	8003e8c <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f871 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000013c 	.word	0x2000013c
 8001228:	40013800 	.word	0x40013800

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_GPIO_Init+0xc8>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <MX_GPIO_Init+0xc8>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_GPIO_Init+0xc8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_GPIO_Init+0xc8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <MX_GPIO_Init+0xc8>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_GPIO_Init+0xc8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_GPIO_Init+0xc8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <MX_GPIO_Init+0xc8>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_GPIO_Init+0xc8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_GPIO_Init+0xc8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <MX_GPIO_Init+0xc8>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_GPIO_Init+0xc8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012a0:	2302      	movs	r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012a4:	2311      	movs	r3, #17
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	4811      	ldr	r0, [pc, #68]	; (80012f8 <MX_GPIO_Init+0xcc>)
 80012b4:	f001 f972 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80012b8:	f640 4303 	movw	r3, #3075	; 0xc03
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4619      	mov	r1, r3
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xd0>)
 80012ce:	f001 f965 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_GPIO_Init+0xd0>)
 80012e8:	f001 f958 	bl	800259c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40010c00 	.word	0x40010c00

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <DWT_Delay_us+0x40>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800131a:	f001 ffdf 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 800131e:	4603      	mov	r3, r0
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <DWT_Delay_us+0x44>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001330:	bf00      	nop
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <DWT_Delay_us+0x40>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad2      	subs	r2, r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3f8      	bcc.n	8001332 <DWT_Delay_us+0x26>
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e0001000 	.word	0xe0001000
 8001350:	431bde83 	.word	0x431bde83

08001354 <rf_begin>:
/* Private user code ---------------------------------------------------------*/

/* RF DRIVER ----------------------------------------------------------------------------------------------------------------------*/

/*--------------------------[CC1101 Init and Settings]------------------------------*/
uint8_t rf_begin(SPI_HandleTypeDef *hspi, MODULATION_TypeDef mode, ISMBAND_TypeDef ism_band, GPIO_TypeDef *cs_port, uint16_t cs_pin, uint16_t gdo0){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	72fb      	strb	r3, [r7, #11]
 8001362:	4613      	mov	r3, r2
 8001364:	72bb      	strb	r3, [r7, #10]
	 * @param gdo0: Pin number of the pin connected to C1101 CGDO0, used for interruptions. Interruption is configured as FALLING EDGE.
	 *
	 */

	//Pinout linking
	hal_spi = hspi;
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <rf_begin+0x7c>)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <rf_begin+0x80>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <rf_begin+0x84>)
 8001374:	8b3b      	ldrh	r3, [r7, #24]
 8001376:	8013      	strh	r3, [r2, #0]
	GDO0_Pin = gdo0;
 8001378:	4a18      	ldr	r2, [pc, #96]	; (80013dc <rf_begin+0x88>)
 800137a:	8bbb      	ldrh	r3, [r7, #28]
 800137c:	8013      	strh	r3, [r2, #0]

	//Turn on the chip
	rf_reset();
 800137e:	f000 f82f 	bl	80013e0 <rf_reset>

	//Check that the SPI works
	if(!rf_check()){
 8001382:	f000 f853 	bl	800142c <rf_check>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <rf_begin+0x3c>
		return FALSE;
 800138c:	2300      	movs	r3, #0
 800138e:	e01b      	b.n	80013c8 <rf_begin+0x74>
	}


	rf_write_strobe(SFTX); //Flush TX FIFO
 8001390:	203b      	movs	r0, #59	; 0x3b
 8001392:	f000 fc91 	bl	8001cb8 <rf_write_strobe>
	HAL_Delay(1); //TODO I don't think this is really needed
 8001396:	2001      	movs	r0, #1
 8001398:	f000 fff8 	bl	800238c <HAL_Delay>
	rf_write_strobe(SFRX); //Flush RX FIFO
 800139c:	203a      	movs	r0, #58	; 0x3a
 800139e:	f000 fc8b 	bl	8001cb8 <rf_write_strobe>
	HAL_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 fff2 	bl	800238c <HAL_Delay>

	rf_set_modulation_mode(mode);
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f86a 	bl	8001484 <rf_set_modulation_mode>

	rf_set_ISMband(ism_band);
 80013b0:	7abb      	ldrb	r3, [r7, #10]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f8a8 	bl	8001508 <rf_set_ISMband>
	rf_set_channel(0);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f907 	bl	80015cc <rf_set_channel>
	rf_set_output_power_level(-30);
 80013be:	f06f 001d 	mvn.w	r0, #29
 80013c2:	f000 f911 	bl	80015e8 <rf_set_output_power_level>
	return TRUE;
 80013c6:	2301      	movs	r3, #1


}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000184 	.word	0x20000184
 80013d4:	20000190 	.word	0x20000190
 80013d8:	2000018c 	.word	0x2000018c
 80013dc:	20000194 	.word	0x20000194

080013e0 <rf_reset>:

void rf_reset(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	/**
	 * @brief Turns on the RF chip with a specific sequence on the CS pin and a SRES command.
	 * The former is only needed on a cold start.
	 */
	DWT_Delay_Init();
 80013e4:	f7ff fd76 	bl	8000ed4 <DWT_Delay_Init>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <rf_reset+0x44>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <rf_reset+0x48>)
 80013ee:	8811      	ldrh	r1, [r2, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fa56 	bl	80028a4 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ff87 	bl	800130c <DWT_Delay_us>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <rf_reset+0x44>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <rf_reset+0x48>)
 8001404:	8811      	ldrh	r1, [r2, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fa4b 	bl	80028a4 <HAL_GPIO_WritePin>
	DWT_Delay_us(40);
 800140e:	2028      	movs	r0, #40	; 0x28
 8001410:	f7ff ff7c 	bl	800130c <DWT_Delay_us>

	rf_write_strobe(SRES);
 8001414:	2030      	movs	r0, #48	; 0x30
 8001416:	f000 fc4f 	bl	8001cb8 <rf_write_strobe>
	HAL_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f000 ffb6 	bl	800238c <HAL_Delay>

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000190 	.word	0x20000190
 8001428:	2000018c 	.word	0x2000018c

0800142c <rf_check>:

uint8_t rf_check(){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	/**
	 * @brief Checks the version of the RF chip to check if SPI is OK. It checks 10 times to make sure wires are really OK.
	 */

	uint8_t ok = TRUE;
 8001432:	2301      	movs	r3, #1
 8001434:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t version;
	for(i=0; i<10; i++){
 8001436:	2300      	movs	r3, #0
 8001438:	71bb      	strb	r3, [r7, #6]
 800143a:	e00c      	b.n	8001456 <rf_check+0x2a>
		version = rf_read_register(VERSION);
 800143c:	20f1      	movs	r0, #241	; 0xf1
 800143e:	f000 fc4c 	bl	8001cda <rf_read_register>
 8001442:	4603      	mov	r3, r0
 8001444:	717b      	strb	r3, [r7, #5]
		if(version!=0x14)
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2b14      	cmp	r3, #20
 800144a:	d001      	beq.n	8001450 <rf_check+0x24>
			ok = FALSE;
 800144c:	2300      	movs	r3, #0
 800144e:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<10; i++){
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	3301      	adds	r3, #1
 8001454:	71bb      	strb	r3, [r7, #6]
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d9ef      	bls.n	800143c <rf_check+0x10>
	}

	if (ok){
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <rf_check+0x3e>
		printf("RF check: OK\n\r");
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <rf_check+0x50>)
 8001464:	f002 ff14 	bl	8004290 <iprintf>
 8001468:	e002      	b.n	8001470 <rf_check+0x44>
	}else{
		printf("RF check: No luck :(\n\r");
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <rf_check+0x54>)
 800146c:	f002 ff10 	bl	8004290 <iprintf>
	}
	return ok;
 8001470:	79fb      	ldrb	r3, [r7, #7]

}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08005244 	.word	0x08005244
 8001480:	08005254 	.word	0x08005254

08001484 <rf_set_modulation_mode>:

void rf_set_modulation_mode(MODULATION_TypeDef mode){
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	 * @brief Loads the wanted modulation preset to the CC1101.
	 */

    const uint8_t *cfg_reg;

    switch (mode)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	3b01      	subs	r3, #1
 8001492:	2b05      	cmp	r3, #5
 8001494:	d820      	bhi.n	80014d8 <rf_set_modulation_mode+0x54>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <rf_set_modulation_mode+0x18>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014b5 	.word	0x080014b5
 80014a0:	080014bb 	.word	0x080014bb
 80014a4:	080014c1 	.word	0x080014c1
 80014a8:	080014c7 	.word	0x080014c7
 80014ac:	080014cd 	.word	0x080014cd
 80014b0:	080014d3 	.word	0x080014d3
    {
        case GFSK_1_2_kb:
        			cfg_reg = cc1100_GFSK_1_2_kb;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <rf_set_modulation_mode+0x6c>)
 80014b6:	60fb      	str	r3, [r7, #12]
                    break;
 80014b8:	e011      	b.n	80014de <rf_set_modulation_mode+0x5a>
        case GFSK_38_4_kb:
                    cfg_reg = cc1100_GFSK_38_4_kb;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <rf_set_modulation_mode+0x70>)
 80014bc:	60fb      	str	r3, [r7, #12]
                    break;
 80014be:	e00e      	b.n	80014de <rf_set_modulation_mode+0x5a>
        case GFSK_100_kb:
        			cfg_reg = cc1100_GFSK_100_kb;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <rf_set_modulation_mode+0x74>)
 80014c2:	60fb      	str	r3, [r7, #12]
                    break;
 80014c4:	e00b      	b.n	80014de <rf_set_modulation_mode+0x5a>
        case MSK_250_kb:
        			cfg_reg = cc1100_MSK_250_kb;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <rf_set_modulation_mode+0x78>)
 80014c8:	60fb      	str	r3, [r7, #12]
                    break;
 80014ca:	e008      	b.n	80014de <rf_set_modulation_mode+0x5a>
        case MSK_500_kb:
        			cfg_reg = cc1100_MSK_500_kb;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <rf_set_modulation_mode+0x7c>)
 80014ce:	60fb      	str	r3, [r7, #12]
                    break;
 80014d0:	e005      	b.n	80014de <rf_set_modulation_mode+0x5a>
        case OOK_4_8_kb:
        			cfg_reg = cc1100_OOK_4_8_kb;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <rf_set_modulation_mode+0x80>)
 80014d4:	60fb      	str	r3, [r7, #12]
                    break;
 80014d6:	e002      	b.n	80014de <rf_set_modulation_mode+0x5a>
        default:
        			cfg_reg = cc1100_GFSK_38_4_kb;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <rf_set_modulation_mode+0x70>)
 80014da:	60fb      	str	r3, [r7, #12]
                    break;
 80014dc:	bf00      	nop
    }

    rf_write_data(WRITE_BURST(0), cfg_reg, CFG_REGISTER);                            //writes all 47 config register
 80014de:	222f      	movs	r2, #47	; 0x2f
 80014e0:	68f9      	ldr	r1, [r7, #12]
 80014e2:	2040      	movs	r0, #64	; 0x40
 80014e4:	f000 fc44 	bl	8001d70 <rf_write_data>


}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	080052ac 	.word	0x080052ac
 80014f4:	080052dc 	.word	0x080052dc
 80014f8:	0800530c 	.word	0x0800530c
 80014fc:	0800533c 	.word	0x0800533c
 8001500:	0800536c 	.word	0x0800536c
 8001504:	0800539c 	.word	0x0800539c

08001508 <rf_set_ISMband>:

//(Semi)DEPRECATED
void rf_set_ISMband(ISMBAND_TypeDef band){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	 * Deprecated by rf_set_frequency(float), although the second still doesn't configure the PATABLES registers, so it is still needed.
	 */
    uint8_t freq2, freq1, freq0;
    const uint8_t *patable;

    switch (band)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	3b01      	subs	r3, #1
 8001516:	2b03      	cmp	r3, #3
 8001518:	d82e      	bhi.n	8001578 <rf_set_ISMband+0x70>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <rf_set_ISMband+0x18>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001531 	.word	0x08001531
 8001524:	08001543 	.word	0x08001543
 8001528:	08001555 	.word	0x08001555
 800152c:	08001567 	.word	0x08001567
    {
        case MHz315:
                    freq2=0x0C;
 8001530:	230c      	movs	r3, #12
 8001532:	73fb      	strb	r3, [r7, #15]
                    freq1=0x1D;
 8001534:	231d      	movs	r3, #29
 8001536:	73bb      	strb	r3, [r7, #14]
                    freq0=0x89;
 8001538:	2389      	movs	r3, #137	; 0x89
 800153a:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_315;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <rf_set_ISMband+0xb4>)
 800153e:	60bb      	str	r3, [r7, #8]
                    break;
 8001540:	e023      	b.n	800158a <rf_set_ISMband+0x82>
        case MHz434:                                                          //433.92MHz
                    freq2=0x10;
 8001542:	2310      	movs	r3, #16
 8001544:	73fb      	strb	r3, [r7, #15]
                    freq1=0xB0;
 8001546:	23b0      	movs	r3, #176	; 0xb0
 8001548:	73bb      	strb	r3, [r7, #14]
                    freq0=0x71;
 800154a:	2371      	movs	r3, #113	; 0x71
 800154c:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_433;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <rf_set_ISMband+0xb8>)
 8001550:	60bb      	str	r3, [r7, #8]
                    break;
 8001552:	e01a      	b.n	800158a <rf_set_ISMband+0x82>
        case MHz868:                                                          //868.3MHz
                    freq2=0x21;
 8001554:	2321      	movs	r3, #33	; 0x21
 8001556:	73fb      	strb	r3, [r7, #15]
                    freq1=0x65;
 8001558:	2365      	movs	r3, #101	; 0x65
 800155a:	73bb      	strb	r3, [r7, #14]
                    freq0=0x6A;
 800155c:	236a      	movs	r3, #106	; 0x6a
 800155e:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_868;
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <rf_set_ISMband+0xbc>)
 8001562:	60bb      	str	r3, [r7, #8]
                    break;
 8001564:	e011      	b.n	800158a <rf_set_ISMband+0x82>
        case MHz915:
                    freq2=0x23;
 8001566:	2323      	movs	r3, #35	; 0x23
 8001568:	73fb      	strb	r3, [r7, #15]
                    freq1=0x31;
 800156a:	2331      	movs	r3, #49	; 0x31
 800156c:	73bb      	strb	r3, [r7, #14]
                    freq0=0x3B;
 800156e:	233b      	movs	r3, #59	; 0x3b
 8001570:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_915;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <rf_set_ISMband+0xc0>)
 8001574:	60bb      	str	r3, [r7, #8]
                    break;
 8001576:	e008      	b.n	800158a <rf_set_ISMband+0x82>
        default:                                                          //868.3MHz
					freq2=0x21;
 8001578:	2321      	movs	r3, #33	; 0x21
 800157a:	73fb      	strb	r3, [r7, #15]
					freq1=0x65;
 800157c:	2365      	movs	r3, #101	; 0x65
 800157e:	73bb      	strb	r3, [r7, #14]
					freq0=0x6A;
 8001580:	236a      	movs	r3, #106	; 0x6a
 8001582:	737b      	strb	r3, [r7, #13]
					patable = patable_power_868;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <rf_set_ISMband+0xbc>)
 8001586:	60bb      	str	r3, [r7, #8]
					break;
 8001588:	bf00      	nop
    }
    rf_write_register(FREQ2,freq2);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4619      	mov	r1, r3
 800158e:	200d      	movs	r0, #13
 8001590:	f000 fbb9 	bl	8001d06 <rf_write_register>
    rf_write_register(FREQ1,freq1);
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	4619      	mov	r1, r3
 8001598:	200e      	movs	r0, #14
 800159a:	f000 fbb4 	bl	8001d06 <rf_write_register>
    rf_write_register(FREQ0,freq0);
 800159e:	7b7b      	ldrb	r3, [r7, #13]
 80015a0:	4619      	mov	r1, r3
 80015a2:	200f      	movs	r0, #15
 80015a4:	f000 fbaf 	bl	8001d06 <rf_write_register>
    rf_write_data(PATABLE_BURST, patable, 8);
 80015a8:	2208      	movs	r2, #8
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	207e      	movs	r0, #126	; 0x7e
 80015ae:	f000 fbdf 	bl	8001d70 <rf_write_data>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800528c 	.word	0x0800528c
 80015c0:	08005294 	.word	0x08005294
 80015c4:	0800529c 	.word	0x0800529c
 80015c8:	080052a4 	.word	0x080052a4

080015cc <rf_set_channel>:

void rf_set_channel(uint8_t channel){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Set channel number.
	 */
	rf_write_register(CHANNR, channel);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4619      	mov	r1, r3
 80015da:	200a      	movs	r0, #10
 80015dc:	f000 fb93 	bl	8001d06 <rf_write_register>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <rf_set_output_power_level>:

void rf_set_output_power_level(int8_t dBm)
/*
 * @brief Selects the entry of the PATABLES preset selected previously.
 */
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    uint8_t pa = 0xC0;
 80015f2:	23c0      	movs	r3, #192	; 0xc0
 80015f4:	73fb      	strb	r3, [r7, #15]

    if      (dBm <= -30) pa = 0x00;
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	f113 0f1d 	cmn.w	r3, #29
 80015fe:	da02      	bge.n	8001606 <rf_set_output_power_level+0x1e>
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e032      	b.n	800166c <rf_set_output_power_level+0x84>
    else if (dBm <= -20) pa = 0x01;
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	f113 0f13 	cmn.w	r3, #19
 800160e:	da02      	bge.n	8001616 <rf_set_output_power_level+0x2e>
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e02a      	b.n	800166c <rf_set_output_power_level+0x84>
    else if (dBm <= -15) pa = 0x02;
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	f113 0f0e 	cmn.w	r3, #14
 800161e:	da02      	bge.n	8001626 <rf_set_output_power_level+0x3e>
 8001620:	2302      	movs	r3, #2
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e022      	b.n	800166c <rf_set_output_power_level+0x84>
    else if (dBm <= -10) pa = 0x03;
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	f113 0f09 	cmn.w	r3, #9
 800162e:	da02      	bge.n	8001636 <rf_set_output_power_level+0x4e>
 8001630:	2303      	movs	r3, #3
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e01a      	b.n	800166c <rf_set_output_power_level+0x84>
    else if (dBm <= 0)   pa = 0x04;
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	dc02      	bgt.n	8001644 <rf_set_output_power_level+0x5c>
 800163e:	2304      	movs	r3, #4
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e013      	b.n	800166c <rf_set_output_power_level+0x84>
    else if (dBm <= 5)   pa = 0x05;
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b05      	cmp	r3, #5
 800164a:	dc02      	bgt.n	8001652 <rf_set_output_power_level+0x6a>
 800164c:	2305      	movs	r3, #5
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e00c      	b.n	800166c <rf_set_output_power_level+0x84>
    else if (dBm <= 7)   pa = 0x06;
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b07      	cmp	r3, #7
 8001658:	dc02      	bgt.n	8001660 <rf_set_output_power_level+0x78>
 800165a:	2306      	movs	r3, #6
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e005      	b.n	800166c <rf_set_output_power_level+0x84>
    else if (dBm <= 10)  pa = 0x07;
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b0a      	cmp	r3, #10
 8001666:	dc01      	bgt.n	800166c <rf_set_output_power_level+0x84>
 8001668:	2307      	movs	r3, #7
 800166a:	73fb      	strb	r3, [r7, #15]

    rf_write_register(FREND0,pa);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	4619      	mov	r1, r3
 8001670:	2022      	movs	r0, #34	; 0x22
 8001672:	f000 fb48 	bl	8001d06 <rf_write_register>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <rf_set_carrier_offset>:

float rf_set_carrier_offset(float offset){
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	 * @Brief Configures frequency offset register to achieve the tergeted offset.
	 * @param offset Desired offset. Should be between -200KHz and +200KHz, depends on crystal.
	 * @returns The actual offset
	 */
	//rf_write_register(FSCTRL0, offset);
	int8_t freqoff = offset*(1<<14)/CRYSTAL_FREQUENCY;
 8001688:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fa8b 	bl	8000ba8 <__aeabi_fmul>
 8001692:	4603      	mov	r3, r0
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <rf_set_carrier_offset+0x48>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb3a 	bl	8000d10 <__aeabi_fdiv>
 800169c:	4603      	mov	r3, r0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fbd2 	bl	8000e48 <__aeabi_f2iz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
	rf_write_register(FSCTRL0, freqoff);
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	4619      	mov	r1, r3
 80016ac:	200c      	movs	r0, #12
 80016ae:	f000 fb2a 	bl	8001d06 <rf_write_register>
	return freqoff*(CRYSTAL_FREQUENCY/(1<<14));
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fa22 	bl	8000b00 <__aeabi_i2f>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	46cb2000 	.word	0x46cb2000
 80016cc:	00000000 	.word	0x00000000

080016d0 <rf_set_carrier_frequency>:

float rf_set_carrier_frequency(float target_freq){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	/* Note that this functions depends on the value of CRYSTAL_FREQUENCY_M.
	 * @param target_freq Frequency targeted, in MHz. Positive number. Note that the actual frequency may vary.
	 * @return Actual configured frequency.
	 */
	target_freq = target_freq*1000000;
 80016d8:	4931      	ldr	r1, [pc, #196]	; (80017a0 <rf_set_carrier_frequency+0xd0>)
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fa64 	bl	8000ba8 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	607b      	str	r3, [r7, #4]
	float freqf = target_freq*65536.0/(float)CRYSTAL_FREQUENCY_M;
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7fe fe97 	bl	8000418 <__aeabi_f2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <rf_set_carrier_frequency+0xd4>)
 80016f0:	f7fe feea 	bl	80004c8 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	a326      	add	r3, pc, #152	; (adr r3, 8001798 <rf_set_carrier_frequency+0xc8>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7ff f80b 	bl	800071c <__aeabi_ddiv>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <rf_set_carrier_frequency+0xd8>)
 8001714:	f7ff f802 	bl	800071c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f8e4 	bl	80008ec <__aeabi_d2f>
 8001724:	4603      	mov	r3, r0
 8001726:	617b      	str	r3, [r7, #20]
	uint32_t freq = (uint32_t)freqf;
 8001728:	6978      	ldr	r0, [r7, #20]
 800172a:	f7ff fbb3 	bl	8000e94 <__aeabi_f2uiz>
 800172e:	4603      	mov	r3, r0
 8001730:	613b      	str	r3, [r7, #16]
	freq = freq&0x00FFFFFF;
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001738:	613b      	str	r3, [r7, #16]
	rf_write_register(FREQ0, freq);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	200f      	movs	r0, #15
 8001742:	f000 fae0 	bl	8001d06 <rf_write_register>
	rf_write_register(FREQ1, (freq>>8));
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4619      	mov	r1, r3
 800174e:	200e      	movs	r0, #14
 8001750:	f000 fad9 	bl	8001d06 <rf_write_register>
	rf_write_register(FREQ2, (freq>>16));
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4619      	mov	r1, r3
 800175c:	200d      	movs	r0, #13
 800175e:	f000 fad2 	bl	8001d06 <rf_write_register>
	float t = ((float)freq*(float)CRYSTAL_FREQUENCY_M)/65536.0;
 8001762:	6938      	ldr	r0, [r7, #16]
 8001764:	f7ff f9c8 	bl	8000af8 <__aeabi_ui2f>
 8001768:	4603      	mov	r3, r0
 800176a:	4910      	ldr	r1, [pc, #64]	; (80017ac <rf_set_carrier_frequency+0xdc>)
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fa1b 	bl	8000ba8 <__aeabi_fmul>
 8001772:	4603      	mov	r3, r0
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <rf_set_carrier_frequency+0xe0>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff faca 	bl	8000d10 <__aeabi_fdiv>
 800177c:	4603      	mov	r3, r0
 800177e:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fac4 	bl	8000d10 <__aeabi_fdiv>
 8001788:	4603      	mov	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]

	return t;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	00000000 	.word	0x00000000
 800179c:	40d96400 	.word	0x40d96400
 80017a0:	49742400 	.word	0x49742400
 80017a4:	40f00000 	.word	0x40f00000
 80017a8:	408f4000 	.word	0x408f4000
 80017ac:	46cb2000 	.word	0x46cb2000
 80017b0:	447a0000 	.word	0x447a0000

080017b4 <rf_sidle>:

}


/*----------------------------[CC1101 States]----------------------------------------------*/
void rf_sidle(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	/**
	 * @brief Set RF chip to idle state
	 */
    uint8_t marcstate;

    rf_write_strobe(SIDLE);              //sets to idle first. must be in
 80017ba:	2036      	movs	r0, #54	; 0x36
 80017bc:	f000 fa7c 	bl	8001cb8 <rf_write_strobe>

    marcstate = 0xFF;                     //set unknown/dummy state value
 80017c0:	23ff      	movs	r3, #255	; 0xff
 80017c2:	71fb      	strb	r3, [r7, #7]

    while(marcstate != IDLE)
 80017c4:	e006      	b.n	80017d4 <rf_sidle+0x20>
    {
        marcstate = (rf_read_register(MARCSTATE) & 0x1F);
 80017c6:	20f5      	movs	r0, #245	; 0xf5
 80017c8:	f000 fa87 	bl	8001cda <rf_read_register>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	71fb      	strb	r3, [r7, #7]
    while(marcstate != IDLE)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d1f5      	bne.n	80017c6 <rf_sidle+0x12>
    }

}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <rf_receive>:

void rf_receive(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	/*
	 * @brief Set RF chip to receive state (RX)
	 */
	//configure interruption, 1 when incoming packet
	rf_write_register(IOCFG0, 0x46);
 80017ea:	2146      	movs	r1, #70	; 0x46
 80017ec:	2002      	movs	r0, #2
 80017ee:	f000 fa8a 	bl	8001d06 <rf_write_register>
	rf_write_strobe(SFRX);
 80017f2:	203a      	movs	r0, #58	; 0x3a
 80017f4:	f000 fa60 	bl	8001cb8 <rf_write_strobe>
	rf_write_strobe(SRX);
 80017f8:	2034      	movs	r0, #52	; 0x34
 80017fa:	f000 fa5d 	bl	8001cb8 <rf_write_strobe>

	uint8_t marcstate = 0xFF;
 80017fe:	23ff      	movs	r3, #255	; 0xff
 8001800:	71fb      	strb	r3, [r7, #7]
	while(marcstate != RX){
 8001802:	e004      	b.n	800180e <rf_receive+0x2a>
		marcstate = (rf_read_register(MARCSTATE)); //read out state of cc1100 to be sure in RX
 8001804:	20f5      	movs	r0, #245	; 0xf5
 8001806:	f000 fa68 	bl	8001cda <rf_read_register>
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	while(marcstate != RX){
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b0d      	cmp	r3, #13
 8001812:	d1f7      	bne.n	8001804 <rf_receive+0x20>
	}
	GDO0_FLAG = 0;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <rf_receive+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000196 	.word	0x20000196

08001828 <rf_incoming_packet>:

	printf("FRAME SENDED\n\r");
    return FRAME_OK;
}

uint8_t rf_incoming_packet(){
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

	return GDO0_FLAG;
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <rf_incoming_packet+0x10>)
 800182e:	781b      	ldrb	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000196 	.word	0x20000196

0800183c <_keep_receiving_data>:

uint8_t  _keep_receiving_data(uint8_t *data, int len){
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	/**
	 * @brief This function CONTINUES the reception of data, but DOES NOT start it. Controls the data flow from the C1101 to MCU
	 * TODO RSSI and LQI values are appended to the packet, what to do with them?
	 */
	int len_received = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
	uint32_t start_tick = HAL_GetTick();
 800184a:	f000 fd95 	bl	8002378 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]
	uint8_t last_chunk = len%DATA_CHUNK_SIZE;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	425a      	negs	r2, r3
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	f002 021f 	and.w	r2, r2, #31
 800185c:	bf58      	it	pl
 800185e:	4253      	negpl	r3, r2
 8001860:	73fb      	strb	r3, [r7, #15]
	GDO0_FLAG = 0;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <_keep_receiving_data+0xb4>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
	while(len_received <len-last_chunk){
 8001868:	e01f      	b.n	80018aa <_keep_receiving_data+0x6e>
		//printf("%d\n\r", rf_read_register(PKTSTATUS)&1);
		if(GDO0_FLAG){ //if buffer is half empty
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <_keep_receiving_data+0xb4>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d010      	beq.n	8001894 <_keep_receiving_data+0x58>
			GDO0_FLAG = 0;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <_keep_receiving_data+0xb4>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
			rf_read_data(RXFIFO, &data[len_received], DATA_CHUNK_SIZE);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	2220      	movs	r2, #32
 8001880:	4619      	mov	r1, r3
 8001882:	20bf      	movs	r0, #191	; 0xbf
 8001884:	f000 fa53 	bl	8001d2e <rf_read_data>
			len_received +=DATA_CHUNK_SIZE;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3320      	adds	r3, #32
 800188c:	617b      	str	r3, [r7, #20]
			start_tick = HAL_GetTick();
 800188e:	f000 fd73 	bl	8002378 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]
		}
		if(HAL_GetTick()-start_tick> TimeOut) return FALSE;
 8001894:	f000 fd70 	bl	8002378 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad2      	subs	r2, r2, r3
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <_keep_receiving_data+0xb8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d901      	bls.n	80018aa <_keep_receiving_data+0x6e>
 80018a6:	2300      	movs	r3, #0
 80018a8:	e01e      	b.n	80018e8 <_keep_receiving_data+0xac>
	while(len_received <len-last_chunk){
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbd9      	blt.n	800186a <_keep_receiving_data+0x2e>
	}
	if(last_chunk){
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d014      	beq.n	80018e6 <_keep_receiving_data+0xaa>
		if(!polling_while_lower(RXBYTES, last_chunk)) return FALSE; //Polling because it won't trigger the threshold.
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4619      	mov	r1, r3
 80018c0:	20fb      	movs	r0, #251	; 0xfb
 80018c2:	f000 f819 	bl	80018f8 <polling_while_lower>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <_keep_receiving_data+0x94>
 80018cc:	2300      	movs	r3, #0
 80018ce:	e00b      	b.n	80018e8 <_keep_receiving_data+0xac>
		GDO0_FLAG = 0;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_keep_receiving_data+0xb4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		rf_read_data(RXFIFO, &data[len_received], last_chunk);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	4619      	mov	r1, r3
 80018e0:	20bf      	movs	r0, #191	; 0xbf
 80018e2:	f000 fa24 	bl	8001d2e <rf_read_data>
	}

	return TRUE;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000196 	.word	0x20000196
 80018f4:	20000000 	.word	0x20000000

080018f8 <polling_while_lower>:

uint8_t polling_while_lower(uint8_t reg, uint8_t size){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
	uint8_t t = rf_read_register(reg);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f9e5 	bl	8001cda <rf_read_register>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
	uint32_t start_tick = HAL_GetTick();
 8001914:	f000 fd30 	bl	8002378 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
	while(t<size){
 800191a:	e013      	b.n	8001944 <polling_while_lower+0x4c>
		t = rf_read_register(reg);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f9db 	bl	8001cda <rf_read_register>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
		//printf("POLLING: %d\n\r", t);
		HAL_Delay(10);
 8001928:	200a      	movs	r0, #10
 800192a:	f000 fd2f 	bl	800238c <HAL_Delay>
		if(HAL_GetTick()-start_tick>TimeOut) return FALSE;
 800192e:	f000 fd23 	bl	8002378 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1ad2      	subs	r2, r2, r3
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <polling_while_lower+0x60>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d901      	bls.n	8001944 <polling_while_lower+0x4c>
 8001940:	2300      	movs	r3, #0
 8001942:	e004      	b.n	800194e <polling_while_lower+0x56>
	while(t<size){
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	429a      	cmp	r2, r3
 800194a:	d3e7      	bcc.n	800191c <polling_while_lower+0x24>
	}
	return TRUE;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000

0800195c <_get_frame_size>:
		HAL_Delay(10);
	}
	return TRUE;
}

uint16_t _get_frame_size(uint8_t* header, uint8_t data_len_loc, uint8_t data_len_size){
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
 8001968:	4613      	mov	r3, r2
 800196a:	70bb      	strb	r3, [r7, #2]
	/*
	 * @Returns The length of the frame.
	 */
	uint16_t mask = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	82fb      	strh	r3, [r7, #22]
	for(int i = 1; i<data_len_size; i++){
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e008      	b.n	8001988 <_get_frame_size+0x2c>
		mask= mask <<1;
 8001976:	8afb      	ldrh	r3, [r7, #22]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	82fb      	strh	r3, [r7, #22]
		mask+=1;
 800197c:	8afb      	ldrh	r3, [r7, #22]
 800197e:	3301      	adds	r3, #1
 8001980:	82fb      	strh	r3, [r7, #22]
	for(int i = 1; i<data_len_size; i++){
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	3301      	adds	r3, #1
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	78bb      	ldrb	r3, [r7, #2]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf2      	blt.n	8001976 <_get_frame_size+0x1a>
	}
	uint16_t frame_size;
	frame_size = (header[data_len_loc] & 0xFF) | ((header[data_len_loc+1]<<8) & 0xFF00);
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b21a      	sxth	r2, r3
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	3301      	adds	r3, #1
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	440b      	add	r3, r1
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	81fb      	strh	r3, [r7, #14]
	frame_size &=mask;
 80019ae:	89fa      	ldrh	r2, [r7, #14]
 80019b0:	8afb      	ldrh	r3, [r7, #22]
 80019b2:	4013      	ands	r3, r2
 80019b4:	81fb      	strh	r3, [r7, #14]
	return frame_size;
 80019b6:	89fb      	ldrh	r3, [r7, #14]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
	...

080019c4 <receive_frame>:

FRAMESTATUS_TypeDef receive_frame(uint8_t *frame_buffer, uint16_t *len, uint8_t data_len_loc, uint8_t data_len_size, uint8_t *lqi, uint8_t *rssi){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	460b      	mov	r3, r1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	4613      	mov	r3, r2
 80019d8:	71bb      	strb	r3, [r7, #6]
	 * @param rssi Received Signal Strengh Indicator.
	 * @Return CRC checksum ok?
	 */

	//init some variables
	uint16_t max_len = *len;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	847b      	strh	r3, [r7, #34]	; 0x22
	*len = 0;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2200      	movs	r2, #0
 80019e4:	801a      	strh	r2, [r3, #0]
	uint16_t frame_len;
	uint8_t data_field_size = sizeof(*len);
 80019e6:	2302      	movs	r3, #2
 80019e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	//Clear flag, since this function should have been called because of it
	GDO0_FLAG = 0;
 80019ec:	4baf      	ldr	r3, [pc, #700]	; (8001cac <receive_frame+0x2e8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]

	//configure interruption. Trigger when RX Buffer above threshold.
	rf_write_register(IOCFG0, 0x40);
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	2002      	movs	r0, #2
 80019f6:	f000 f986 	bl	8001d06 <rf_write_register>

	//Set to infinite len mode
	uint8_t pktcrtl0 = rf_read_register(PKTCTRL0);
 80019fa:	2008      	movs	r0, #8
 80019fc:	f000 f96d 	bl	8001cda <rf_read_register>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 3020 	strb.w	r3, [r7, #32]
	pktcrtl0 = pktcrtl0 & 0b11111100; //reset len mode
 8001a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	f887 3020 	strb.w	r3, [r7, #32]
	pktcrtl0 = pktcrtl0 | 0x2;
 8001a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	f887 3020 	strb.w	r3, [r7, #32]
	rf_write_register(PKTCTRL0, pktcrtl0);
 8001a1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a22:	4619      	mov	r1, r3
 8001a24:	2008      	movs	r0, #8
 8001a26:	f000 f96e 	bl	8001d06 <rf_write_register>


	//check if receiving something
	uint8_t SFD = 0b00001000; //Sync Word OK? Addr (if enabled) OK?
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	77fb      	strb	r3, [r7, #31]
	uint8_t status = 1; //rf_read_register(PKTSTATUS);
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}
	*/
	//printf("SFD OK\n\r");

	//get frame size
	if(!polling_while_lower(RXBYTES, data_len_loc+data_field_size)) return TIMEOUT; //TODO reconfigure RX Threshold to detect the first bytes??
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	20fb      	movs	r0, #251	; 0xfb
 8001a42:	f7ff ff59 	bl	80018f8 <polling_while_lower>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <receive_frame+0x8e>
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a50:	e127      	b.n	8001ca2 <receive_frame+0x2de>
	rf_read_data(RXFIFO, frame_buffer, data_len_loc+data_field_size);
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a58:	4413      	add	r3, r2
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68f9      	ldr	r1, [r7, #12]
 8001a60:	20bf      	movs	r0, #191	; 0xbf
 8001a62:	f000 f964 	bl	8001d2e <rf_read_data>
	frame_len = _get_frame_size(frame_buffer, data_len_loc, data_len_size);
 8001a66:	79ba      	ldrb	r2, [r7, #6]
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff ff75 	bl	800195c <_get_frame_size>
 8001a72:	4603      	mov	r3, r0
 8001a74:	84fb      	strh	r3, [r7, #38]	; 0x26
	*len +=data_len_loc+data_field_size;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	b299      	uxth	r1, r3
 8001a7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	440b      	add	r3, r1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	801a      	strh	r2, [r3, #0]
	if(frame_len > max_len) frame_len = max_len;
 8001a90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d901      	bls.n	8001a9c <receive_frame+0xd8>
 8001a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a9a:	84fb      	strh	r3, [r7, #38]	; 0x26
	printf("FRAME LEN: %d\n\r", frame_len);
 8001a9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4883      	ldr	r0, [pc, #524]	; (8001cb0 <receive_frame+0x2ec>)
 8001aa2:	f002 fbf5 	bl	8004290 <iprintf>


	uint16_t remaining_len = frame_len-*len;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	83bb      	strh	r3, [r7, #28]
	//set packet length
	rf_write_register(PKTLEN, (frame_len)%256);
 8001ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	2006      	movs	r0, #6
 8001ab8:	f000 f925 	bl	8001d06 <rf_write_register>


	if(remaining_len>FIXED_LENGTH_LIMIT){
 8001abc:	8bbb      	ldrh	r3, [r7, #28]
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d941      	bls.n	8001b46 <receive_frame+0x182>
		int times = (remaining_len)/FIFO_SIZE;
 8001ac2:	8bbb      	ldrh	r3, [r7, #28]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	61bb      	str	r3, [r7, #24]
		if(!_keep_receiving_data(&frame_buffer[*len], times*FIFO_SIZE)) return TIMEOUT;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	441a      	add	r2, r3
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	019b      	lsls	r3, r3, #6
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7ff feae 	bl	800183c <_keep_receiving_data>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <receive_frame+0x128>
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e0da      	b.n	8001ca2 <receive_frame+0x2de>
		*len += times*FIFO_SIZE;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	881a      	ldrh	r2, [r3, #0]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	801a      	strh	r2, [r3, #0]

		//set packet length to fixed
		pktcrtl0 = pktcrtl0 & 0b11111100;
 8001b00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b04:	f023 0303 	bic.w	r3, r3, #3
 8001b08:	f887 3020 	strb.w	r3, [r7, #32]
		rf_write_register(PKTCTRL0, pktcrtl0);
 8001b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b10:	4619      	mov	r1, r3
 8001b12:	2008      	movs	r0, #8
 8001b14:	f000 f8f7 	bl	8001d06 <rf_write_register>

		//receive remaining
		remaining_len = frame_len-*len;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	83bb      	strh	r3, [r7, #28]
		_keep_receiving_data(&frame_buffer[*len], remaining_len);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	8bba      	ldrh	r2, [r7, #28]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe83 	bl	800183c <_keep_receiving_data>
		*len+=remaining_len;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	8bbb      	ldrh	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	e050      	b.n	8001be8 <receive_frame+0x224>

	}else if(remaining_len>DATA_CHUNK_SIZE){
 8001b46:	8bbb      	ldrh	r3, [r7, #28]
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d923      	bls.n	8001b94 <receive_frame+0x1d0>
		//set packet length to fixed
		pktcrtl0 = pktcrtl0 & 0b11111100;
 8001b4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b50:	f023 0303 	bic.w	r3, r3, #3
 8001b54:	f887 3020 	strb.w	r3, [r7, #32]
		rf_write_register(PKTCTRL0, pktcrtl0);
 8001b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2008      	movs	r0, #8
 8001b60:	f000 f8d1 	bl	8001d06 <rf_write_register>

		//receive remaining
		if(!_keep_receiving_data(&frame_buffer[*len], remaining_len)) return TIMEOUT;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	8bba      	ldrh	r2, [r7, #28]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe62 	bl	800183c <_keep_receiving_data>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <receive_frame+0x1c0>
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e08e      	b.n	8001ca2 <receive_frame+0x2de>
		*len+=remaining_len;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	8bbb      	ldrh	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	e029      	b.n	8001be8 <receive_frame+0x224>

	}else{
		//set packet length to fixed
		pktcrtl0 = pktcrtl0 & 0b11111100;
 8001b94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b98:	f023 0303 	bic.w	r3, r3, #3
 8001b9c:	f887 3020 	strb.w	r3, [r7, #32]
		rf_write_register(PKTCTRL0, pktcrtl0);
 8001ba0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2008      	movs	r0, #8
 8001ba8:	f000 f8ad 	bl	8001d06 <rf_write_register>

		//TODO using polling to not reconfigure interrupt
		if(!polling_while_lower(RXBYTES, remaining_len)) return TIMEOUT;
 8001bac:	8bbb      	ldrh	r3, [r7, #28]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	20fb      	movs	r0, #251	; 0xfb
 8001bb4:	f7ff fea0 	bl	80018f8 <polling_while_lower>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <receive_frame+0x200>
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e06e      	b.n	8001ca2 <receive_frame+0x2de>
		rf_read_data(RXFIFO, &frame_buffer[*len], remaining_len);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	8bba      	ldrh	r2, [r7, #28]
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	20bf      	movs	r0, #191	; 0xbf
 8001bd6:	f000 f8aa 	bl	8001d2e <rf_read_data>
		*len+=remaining_len;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	881a      	ldrh	r2, [r3, #0]
 8001bde:	8bbb      	ldrh	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	801a      	strh	r2, [r3, #0]
		//if(i%256!=frame_buffer[i])
			printf("%d: %d \r", i, frame_buffer[i]);
	*/
	//if rssi and lqi enabled

	*lqi = rf_read_register(LQI);
 8001be8:	20f3      	movs	r0, #243	; 0xf3
 8001bea:	f000 f876 	bl	8001cda <rf_read_register>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf4:	701a      	strb	r2, [r3, #0]
	uint8_t crc = (*lqi) & 0x80;
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bfe:	75fb      	strb	r3, [r7, #23]
	*lqi = *lqi & 0x7F;
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0c:	701a      	strb	r2, [r3, #0]

	*rssi = rf_read_register(RSSI);
 8001c0e:	20f4      	movs	r0, #244	; 0xf4
 8001c10:	f000 f863 	bl	8001cda <rf_read_register>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	701a      	strb	r2, [r3, #0]
	while((status&SFD)){
 8001c1c:	e005      	b.n	8001c2a <receive_frame+0x266>
				status = rf_read_register(PKTSTATUS);
 8001c1e:	20f8      	movs	r0, #248	; 0xf8
 8001c20:	f000 f85b 	bl	8001cda <rf_read_register>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while((status&SFD)){
 8001c2a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001c2e:	7ffb      	ldrb	r3, [r7, #31]
 8001c30:	4013      	ands	r3, r2
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f2      	bne.n	8001c1e <receive_frame+0x25a>
	}

	status = 0xFF;
 8001c38:	23ff      	movs	r3, #255	; 0xff
 8001c3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t start_tick = HAL_GetTick();
 8001c3e:	f000 fb9b 	bl	8002378 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]
	while(status!=IDLE){ //PKTCTRL0 configured to go back to IDLE when reception finnished
 8001c44:	e01d      	b.n	8001c82 <receive_frame+0x2be>
					status = rf_read_register(MARCSTATE);
 8001c46:	20f5      	movs	r0, #245	; 0xf5
 8001c48:	f000 f847 	bl	8001cda <rf_read_register>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					HAL_Delay(100);
 8001c52:	2064      	movs	r0, #100	; 0x64
 8001c54:	f000 fb9a 	bl	800238c <HAL_Delay>
					if(HAL_GetTick()- start_tick > TimeOut){
 8001c58:	f000 fb8e 	bl	8002378 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad2      	subs	r2, r2, r3
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <receive_frame+0x2f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90b      	bls.n	8001c82 <receive_frame+0x2be>
						if(status==RXFIFO_OVERFLOW){
 8001c6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d103      	bne.n	8001c7a <receive_frame+0x2b6>
							rf_write_strobe(SFRX);
 8001c72:	203a      	movs	r0, #58	; 0x3a
 8001c74:	f000 f820 	bl	8001cb8 <rf_write_strobe>
 8001c78:	e001      	b.n	8001c7e <receive_frame+0x2ba>
						}else{
							rf_sidle();
 8001c7a:	f7ff fd9b 	bl	80017b4 <rf_sidle>
						}
						return FRAME_BAD;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e00f      	b.n	8001ca2 <receive_frame+0x2de>
	while(status!=IDLE){ //PKTCTRL0 configured to go back to IDLE when reception finnished
 8001c82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d1dd      	bne.n	8001c46 <receive_frame+0x282>
					}
	}
	//printf("%d CRC: %d\n\r", *len, crc);
	FRAMESTATUS_TypeDef frame_status;
	if(crc){
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <receive_frame+0x2d4>
		frame_status = FRAME_OK;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001c96:	e002      	b.n	8001c9e <receive_frame+0x2da>
	}else{
		frame_status = FRAME_BAD;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}
	return frame_status;
 8001c9e:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000196 	.word	0x20000196
 8001cb0:	0800527c 	.word	0x0800527c
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <rf_write_strobe>:


/* SPI Comm ----------------------------------------------------------------*/

void rf_write_strobe(uint8_t strobe){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Writes command to the CC1101 to change its state-machine state.
	 */
	strobe = WRITE(strobe);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, NULL, NULL);
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 f86d 	bl	8001dac <__spi_write>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <rf_read_register>:

uint8_t rf_read_register(uint8_t reg){
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Reads the content of a single 1-byte register.
	 * @Returns The register value.
	 */
	uint8_t data;
	reg= READ(reg);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	71fb      	strb	r3, [r7, #7]
	__spi_read(&reg, &data, 1);
 8001cee:	f107 010f 	add.w	r1, r7, #15
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f894 	bl	8001e24 <__spi_read>
	return data;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <rf_write_register>:

void rf_write_register(uint8_t reg, uint8_t data){
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460a      	mov	r2, r1
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	4613      	mov	r3, r2
 8001d14:	71bb      	strb	r3, [r7, #6]
	/**
	 * @brief Overwrites a register.
	 */
	reg = WRITE(reg);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	71fb      	strb	r3, [r7, #7]
	__spi_write(&reg, &data, 1);
 8001d1a:	1db9      	adds	r1, r7, #6
 8001d1c:	1dfb      	adds	r3, r7, #7
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f843 	bl	8001dac <__spi_write>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <rf_read_data>:

void rf_read_data(uint8_t addr, uint8_t* data, uint8_t size){
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	6039      	str	r1, [r7, #0]
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	71bb      	strb	r3, [r7, #6]
	 * @brief Reads multiple data.
	 * @param addr Base address.
	 * @param data The buffer where the read data will be stored.
	 * @param size Number of bytes to be read.
	 */
	if(size>1){
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d905      	bls.n	8001d50 <rf_read_data+0x22>
		addr = READ_BURST(addr);
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	e004      	b.n	8001d5a <rf_read_data+0x2c>
	}else{
		addr = READ(addr);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	71fb      	strb	r3, [r7, #7]
	}
	__spi_read(&addr, data, size);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f85e 	bl	8001e24 <__spi_read>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <rf_write_data>:

void rf_write_data(uint8_t addr, uint8_t* data, uint8_t size){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
	 * @brief Writes multiple data.
	 * @param addr Base address.
	 * @param data The buffer where the data to be written is located.
	 * @param size Number of bytes to be written.
	 */
	if(size>1){
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d905      	bls.n	8001d92 <rf_write_data+0x22>
		addr = WRITE_BURST(addr);
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	e001      	b.n	8001d96 <rf_write_data+0x26>
	}else{
		addr = WRITE(addr);
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	71fb      	strb	r3, [r7, #7]
	}
	__spi_write(&addr, data, size);
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f804 	bl	8001dac <__spi_write>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <__spi_write>:

/* SPI Handling -------------------------------------------------------------*/

	HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <__spi_write+0x6c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <__spi_write+0x70>)
 8001dc0:	8811      	ldrh	r1, [r2, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fd6d 	bl	80028a4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <__spi_write+0x74>)
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	f001 fb55 	bl	8003484 <HAL_SPI_Transmit>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	75fb      	strb	r3, [r7, #23]
	if(status==HAL_OK && pData!=NULL)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10c      	bne.n	8001dfe <__spi_write+0x52>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <__spi_write+0x52>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <__spi_write+0x74>)
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	f001 fb45 	bl	8003484 <HAL_SPI_Transmit>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <__spi_write+0x6c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <__spi_write+0x70>)
 8001e04:	8811      	ldrh	r1, [r2, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fd4b 	bl	80028a4 <HAL_GPIO_WritePin>
	return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000190 	.word	0x20000190
 8001e1c:	2000018c 	.word	0x2000018c
 8001e20:	20000184 	.word	0x20000184

08001e24 <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <__spi_read+0x60>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <__spi_read+0x64>)
 8001e38:	8811      	ldrh	r1, [r2, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fd31 	bl	80028a4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <__spi_read+0x68>)
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	f001 fb19 	bl	8003484 <HAL_SPI_Transmit>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <__spi_read+0x68>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	f001 fc52 	bl	800370a <HAL_SPI_Receive>
 8001e66:	4603      	mov	r3, r0
 8001e68:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <__spi_read+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <__spi_read+0x64>)
 8001e70:	8811      	ldrh	r1, [r2, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fd15 	bl	80028a4 <HAL_GPIO_WritePin>

	return status;
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]

}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000190 	.word	0x20000190
 8001e88:	2000018c 	.word	0x2000018c
 8001e8c:	20000184 	.word	0x20000184

08001e90 <init_serial>:
	}*/
}

/* MISCELLANEOUS -----------------------------------------------------------------------------------------------------------*/

void init_serial(UART_HandleTypeDef* huart){
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

	hal_uart = huart;
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <init_serial+0x18>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000188 	.word	0x20000188

08001eac <__io_putchar>:


int __io_putchar(int ch)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(hal_uart, &*c, 1, 10);
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <__io_putchar+0x28>)
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	f107 010c 	add.w	r1, r7, #12
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f002 f831 	bl	8003f2c <HAL_UART_Transmit>
 return ch;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000188 	.word	0x20000188

08001ed8 <_write>:

int _write(int file,char *ptr, int len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e009      	b.n	8001efe <_write+0x26>
 {
 __io_putchar(*ptr++);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	60ba      	str	r2, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffda 	bl	8001eac <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dbf1      	blt.n	8001eea <_write+0x12>
 }
return len;
 8001f06:	687b      	ldr	r3, [r7, #4]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6193      	str	r3, [r2, #24]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_MspInit+0x60>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_MspInit+0x60>)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000

08001f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <HAL_I2C_MspInit+0x70>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d123      	bne.n	8001fdc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fac:	23c0      	movs	r3, #192	; 0xc0
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <HAL_I2C_MspInit+0x78>)
 8001fc0:	f000 faec 	bl	800259c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fce:	61d3      	str	r3, [r2, #28]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_I2C_MspInit+0x74>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010c00 	.word	0x40010c00

08001ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_SPI_MspInit+0x88>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12f      	bne.n	8002070 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_SPI_MspInit+0x8c>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_SPI_MspInit+0x8c>)
 8002016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_SPI_MspInit+0x8c>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_SPI_MspInit+0x8c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a13      	ldr	r2, [pc, #76]	; (800207c <HAL_SPI_MspInit+0x8c>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_SPI_MspInit+0x8c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002040:	23b0      	movs	r3, #176	; 0xb0
 8002042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	480b      	ldr	r0, [pc, #44]	; (8002080 <HAL_SPI_MspInit+0x90>)
 8002054:	f000 faa2 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <HAL_SPI_MspInit+0x90>)
 800206c:	f000 fa96 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40013000 	.word	0x40013000
 800207c:	40021000 	.word	0x40021000
 8002080:	40010800 	.word	0x40010800

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_UART_MspInit+0x8c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d131      	bne.n	8002108 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4619      	mov	r1, r3
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_UART_MspInit+0x94>)
 80020ea:	f000 fa57 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <HAL_UART_MspInit+0x94>)
 8002104:	f000 fa4a 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40013800 	.word	0x40013800
 8002114:	40021000 	.word	0x40021000
 8002118:	40010800 	.word	0x40010800

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002162:	f000 f8f7 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}

0800216a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e00a      	b.n	8002192 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800217c:	f3af 8000 	nop.w
 8002180:	4601      	mov	r1, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	60ba      	str	r2, [r7, #8]
 8002188:	b2ca      	uxtb	r2, r1
 800218a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3301      	adds	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	dbf0      	blt.n	800217c <_read+0x12>
  }

  return len;
 800219a:	687b      	ldr	r3, [r7, #4]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ca:	605a      	str	r2, [r3, #4]
  return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <_isatty>:

int _isatty(int file)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <_sbrk+0x5c>)
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <_sbrk+0x60>)
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <_sbrk+0x64>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <_sbrk+0x68>)
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d207      	bcs.n	8002244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002234:	f001 fffa 	bl	800422c <__errno>
 8002238:	4603      	mov	r3, r0
 800223a:	220c      	movs	r2, #12
 800223c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	e009      	b.n	8002258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <_sbrk+0x64>)
 8002254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20005000 	.word	0x20005000
 8002264:	00000400 	.word	0x00000400
 8002268:	20000198 	.word	0x20000198
 800226c:	200001b0 	.word	0x200001b0

08002270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800227c:	f7ff fff8 	bl	8002270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002282:	490c      	ldr	r1, [pc, #48]	; (80022b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002298:	4c09      	ldr	r4, [pc, #36]	; (80022c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a6:	f001 ffc7 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022aa:	f7fe fe43 	bl	8000f34 <main>
  bx lr
 80022ae:	4770      	bx	lr
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022b8:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 80022bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022c0:	200001b0 	.word	0x200001b0

080022c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC1_2_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_Init+0x28>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_Init+0x28>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f92b 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	200f      	movs	r0, #15
 80022e0:	f000 f808 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff fe14 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f935 	bl	8002582 <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f000 f90b 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000004 	.word	0x20000004
 800234c:	2000000c 	.word	0x2000000c
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_IncTick+0x1c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_IncTick+0x20>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a03      	ldr	r2, [pc, #12]	; (8002374 <HAL_IncTick+0x20>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	2000000c 	.word	0x2000000c
 8002374:	2000019c 	.word	0x2000019c

08002378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b02      	ldr	r3, [pc, #8]	; (8002388 <HAL_GetTick+0x10>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	2000019c 	.word	0x2000019c

0800238c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff fff0 	bl	8002378 <HAL_GetTick>
 8002398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d005      	beq.n	80023b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_Delay+0x44>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b2:	bf00      	nop
 80023b4:	f7ff ffe0 	bl	8002378 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d8f7      	bhi.n	80023b4 <HAL_Delay+0x28>
  {
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000000c 	.word	0x2000000c

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f7ff ff90 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff49 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff5e 	bl	800241c <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff90 	bl	800248c <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5f 	bl	8002438 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffb0 	bl	80024f0 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b08b      	sub	sp, #44	; 0x2c
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ae:	e169      	b.n	8002884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025b0:	2201      	movs	r2, #1
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f040 8158 	bne.w	800287e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a9a      	ldr	r2, [pc, #616]	; (800283c <HAL_GPIO_Init+0x2a0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d05e      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025d8:	4a98      	ldr	r2, [pc, #608]	; (800283c <HAL_GPIO_Init+0x2a0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d875      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 80025de:	4a98      	ldr	r2, [pc, #608]	; (8002840 <HAL_GPIO_Init+0x2a4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d058      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025e4:	4a96      	ldr	r2, [pc, #600]	; (8002840 <HAL_GPIO_Init+0x2a4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d86f      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 80025ea:	4a96      	ldr	r2, [pc, #600]	; (8002844 <HAL_GPIO_Init+0x2a8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d052      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025f0:	4a94      	ldr	r2, [pc, #592]	; (8002844 <HAL_GPIO_Init+0x2a8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d869      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 80025f6:	4a94      	ldr	r2, [pc, #592]	; (8002848 <HAL_GPIO_Init+0x2ac>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d04c      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 80025fc:	4a92      	ldr	r2, [pc, #584]	; (8002848 <HAL_GPIO_Init+0x2ac>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d863      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 8002602:	4a92      	ldr	r2, [pc, #584]	; (800284c <HAL_GPIO_Init+0x2b0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d046      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
 8002608:	4a90      	ldr	r2, [pc, #576]	; (800284c <HAL_GPIO_Init+0x2b0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d85d      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 800260e:	2b12      	cmp	r3, #18
 8002610:	d82a      	bhi.n	8002668 <HAL_GPIO_Init+0xcc>
 8002612:	2b12      	cmp	r3, #18
 8002614:	d859      	bhi.n	80026ca <HAL_GPIO_Init+0x12e>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <HAL_GPIO_Init+0x80>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	08002697 	.word	0x08002697
 8002620:	08002671 	.word	0x08002671
 8002624:	08002683 	.word	0x08002683
 8002628:	080026c5 	.word	0x080026c5
 800262c:	080026cb 	.word	0x080026cb
 8002630:	080026cb 	.word	0x080026cb
 8002634:	080026cb 	.word	0x080026cb
 8002638:	080026cb 	.word	0x080026cb
 800263c:	080026cb 	.word	0x080026cb
 8002640:	080026cb 	.word	0x080026cb
 8002644:	080026cb 	.word	0x080026cb
 8002648:	080026cb 	.word	0x080026cb
 800264c:	080026cb 	.word	0x080026cb
 8002650:	080026cb 	.word	0x080026cb
 8002654:	080026cb 	.word	0x080026cb
 8002658:	080026cb 	.word	0x080026cb
 800265c:	080026cb 	.word	0x080026cb
 8002660:	08002679 	.word	0x08002679
 8002664:	0800268d 	.word	0x0800268d
 8002668:	4a79      	ldr	r2, [pc, #484]	; (8002850 <HAL_GPIO_Init+0x2b4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800266e:	e02c      	b.n	80026ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	623b      	str	r3, [r7, #32]
          break;
 8002676:	e029      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	3304      	adds	r3, #4
 800267e:	623b      	str	r3, [r7, #32]
          break;
 8002680:	e024      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	3308      	adds	r3, #8
 8002688:	623b      	str	r3, [r7, #32]
          break;
 800268a:	e01f      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	330c      	adds	r3, #12
 8002692:	623b      	str	r3, [r7, #32]
          break;
 8002694:	e01a      	b.n	80026cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800269e:	2304      	movs	r3, #4
 80026a0:	623b      	str	r3, [r7, #32]
          break;
 80026a2:	e013      	b.n	80026cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ac:	2308      	movs	r3, #8
 80026ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	611a      	str	r2, [r3, #16]
          break;
 80026b6:	e009      	b.n	80026cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b8:	2308      	movs	r3, #8
 80026ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	615a      	str	r2, [r3, #20]
          break;
 80026c2:	e003      	b.n	80026cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x130>
          break;
 80026ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2bff      	cmp	r3, #255	; 0xff
 80026d0:	d801      	bhi.n	80026d6 <HAL_GPIO_Init+0x13a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	e001      	b.n	80026da <HAL_GPIO_Init+0x13e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2bff      	cmp	r3, #255	; 0xff
 80026e0:	d802      	bhi.n	80026e8 <HAL_GPIO_Init+0x14c>
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	e002      	b.n	80026ee <HAL_GPIO_Init+0x152>
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	3b08      	subs	r3, #8
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	210f      	movs	r1, #15
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	6a39      	ldr	r1, [r7, #32]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	431a      	orrs	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80b1 	beq.w	800287e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_GPIO_Init+0x2b8>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <HAL_GPIO_Init+0x2b8>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_GPIO_Init+0x2b8>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <HAL_GPIO_Init+0x2bc>)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a40      	ldr	r2, [pc, #256]	; (800285c <HAL_GPIO_Init+0x2c0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d013      	beq.n	8002788 <HAL_GPIO_Init+0x1ec>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3f      	ldr	r2, [pc, #252]	; (8002860 <HAL_GPIO_Init+0x2c4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00d      	beq.n	8002784 <HAL_GPIO_Init+0x1e8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a3e      	ldr	r2, [pc, #248]	; (8002864 <HAL_GPIO_Init+0x2c8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <HAL_GPIO_Init+0x1e4>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3d      	ldr	r2, [pc, #244]	; (8002868 <HAL_GPIO_Init+0x2cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_GPIO_Init+0x1e0>
 8002778:	2303      	movs	r3, #3
 800277a:	e006      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 800277c:	2304      	movs	r3, #4
 800277e:	e004      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 8002780:	2302      	movs	r3, #2
 8002782:	e002      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_GPIO_Init+0x1ee>
 8002788:	2300      	movs	r3, #0
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	f002 0203 	and.w	r2, r2, #3
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	4093      	lsls	r3, r2
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800279a:	492f      	ldr	r1, [pc, #188]	; (8002858 <HAL_GPIO_Init+0x2bc>)
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	492c      	ldr	r1, [pc, #176]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
 80027c0:	e006      	b.n	80027d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	4928      	ldr	r1, [pc, #160]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	4922      	ldr	r1, [pc, #136]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	491e      	ldr	r1, [pc, #120]	; (800286c <HAL_GPIO_Init+0x2d0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_GPIO_Init+0x2d0>)
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4918      	ldr	r1, [pc, #96]	; (800286c <HAL_GPIO_Init+0x2d0>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_GPIO_Init+0x2d0>)
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	43db      	mvns	r3, r3
 800281a:	4914      	ldr	r1, [pc, #80]	; (800286c <HAL_GPIO_Init+0x2d0>)
 800281c:	4013      	ands	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d021      	beq.n	8002870 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_GPIO_Init+0x2d0>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e021      	b.n	800287e <HAL_GPIO_Init+0x2e2>
 800283a:	bf00      	nop
 800283c:	10320000 	.word	0x10320000
 8002840:	10310000 	.word	0x10310000
 8002844:	10220000 	.word	0x10220000
 8002848:	10210000 	.word	0x10210000
 800284c:	10120000 	.word	0x10120000
 8002850:	10110000 	.word	0x10110000
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000
 800285c:	40010800 	.word	0x40010800
 8002860:	40010c00 	.word	0x40010c00
 8002864:	40011000 	.word	0x40011000
 8002868:	40011400 	.word	0x40011400
 800286c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_GPIO_Init+0x304>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	43db      	mvns	r3, r3
 8002878:	4909      	ldr	r1, [pc, #36]	; (80028a0 <HAL_GPIO_Init+0x304>)
 800287a:	4013      	ands	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3301      	adds	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	f47f ae8e 	bne.w	80025b0 <HAL_GPIO_Init+0x14>
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	372c      	adds	r7, #44	; 0x2c
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028c0:	e003      	b.n	80028ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e12b      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fb3a 	bl	8001f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	; 0x24
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002938:	f000 fcda 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a81      	ldr	r2, [pc, #516]	; (8002b48 <HAL_I2C_Init+0x274>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d807      	bhi.n	8002958 <HAL_I2C_Init+0x84>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a80      	ldr	r2, [pc, #512]	; (8002b4c <HAL_I2C_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e006      	b.n	8002966 <HAL_I2C_Init+0x92>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <HAL_I2C_Init+0x27c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e7      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <HAL_I2C_Init+0x280>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_I2C_Init+0x274>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d802      	bhi.n	80029a8 <HAL_I2C_Init+0xd4>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3301      	adds	r3, #1
 80029a6:	e009      	b.n	80029bc <HAL_I2C_Init+0xe8>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_I2C_Init+0x284>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	495c      	ldr	r1, [pc, #368]	; (8002b48 <HAL_I2C_Init+0x274>)
 80029d8:	428b      	cmp	r3, r1
 80029da:	d819      	bhi.n	8002a10 <HAL_I2C_Init+0x13c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e59      	subs	r1, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f0:	400b      	ands	r3, r1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_I2C_Init+0x138>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e59      	subs	r1, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	e051      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e04f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d111      	bne.n	8002a3c <HAL_I2C_Init+0x168>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e012      	b.n	8002a62 <HAL_I2C_Init+0x18e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Init+0x196>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <HAL_I2C_Init+0x1bc>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e58      	subs	r0, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	440b      	add	r3, r1
 8002a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8e:	e00f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	6809      	ldr	r1, [r1, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6911      	ldr	r1, [r2, #16]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	000186a0 	.word	0x000186a0
 8002b4c:	001e847f 	.word	0x001e847f
 8002b50:	003d08ff 	.word	0x003d08ff
 8002b54:	431bde83 	.word	0x431bde83
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e272      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b7c:	4b92      	ldr	r3, [pc, #584]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b88:	4b8f      	ldr	r3, [pc, #572]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d112      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
 8002b94:	4b8c      	ldr	r3, [pc, #560]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d10b      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	4b89      	ldr	r3, [pc, #548]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d06c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x12c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d168      	bne.n	8002c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e24c      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x76>
 8002bc4:	4b80      	ldr	r3, [pc, #512]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a7f      	ldr	r2, [pc, #508]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e02e      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7a      	ldr	r2, [pc, #488]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b78      	ldr	r3, [pc, #480]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a77      	ldr	r2, [pc, #476]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0xbc>
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a71      	ldr	r2, [pc, #452]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6a      	ldr	r2, [pc, #424]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a67      	ldr	r2, [pc, #412]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff fb9e 	bl	8002378 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff fb9a 	bl	8002378 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e200      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe4>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fb8a 	bl	8002378 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff fb86 	bl	8002378 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1ec      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x10c>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
 8002cae:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1c0      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4939      	ldr	r1, [pc, #228]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7ff fb3f 	bl	8002378 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7ff fb3b 	bl	8002378 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1a1      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4927      	ldr	r1, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff fb1e 	bl	8002378 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7ff fb1a 	bl	8002378 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e180      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03a      	beq.n	8002de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d019      	beq.n	8002da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7ff fafe 	bl	8002378 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d80:	f7ff fafa 	bl	8002378 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e160      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f000 face 	bl	8003340 <RCC_Delay>
 8002da4:	e01c      	b.n	8002de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7ff fae4 	bl	8002378 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e00f      	b.n	8002dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7ff fae0 	bl	8002378 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e146      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	42420000 	.word	0x42420000
 8002dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b92      	ldr	r3, [pc, #584]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e9      	bne.n	8002db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a6 	beq.w	8002f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b8b      	ldr	r3, [pc, #556]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a87      	ldr	r2, [pc, #540]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b82      	ldr	r3, [pc, #520]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b7f      	ldr	r3, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7e      	ldr	r2, [pc, #504]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7ff faa1 	bl	8002378 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7ff fa9d 	bl	8002378 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e103      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x312>
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a6e      	ldr	r2, [pc, #440]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e02d      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002e76:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a69      	ldr	r2, [pc, #420]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a66      	ldr	r2, [pc, #408]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	e01c      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x356>
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a60      	ldr	r2, [pc, #384]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a5a      	ldr	r2, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7ff fa51 	bl	8002378 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7ff fa4d 	bl	8002378 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0b1      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RCC_OscConfig+0x37e>
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7ff fa3b 	bl	8002378 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7ff fa37 	bl	8002378 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e09b      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ee      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4b3c      	ldr	r3, [pc, #240]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a3b      	ldr	r2, [pc, #236]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f44:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d061      	beq.n	8003014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d146      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b33      	ldr	r3, [pc, #204]	; (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff fa0b 	bl	8002378 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7ff fa07 	bl	8002378 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e06d      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4921      	ldr	r1, [pc, #132]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a19      	ldr	r1, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	491b      	ldr	r1, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7ff f9db 	bl	8002378 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7ff f9d7 	bl	8002378 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e03d      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x46a>
 8002fe4:	e035      	b.n	8003052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff f9c4 	bl	8002378 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7ff f9c0 	bl	8002378 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e026      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x498>
 8003012:	e01e      	b.n	8003052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e019      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
 8003028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x500>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	429a      	cmp	r2, r3
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0d0      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d910      	bls.n	80030a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b67      	ldr	r3, [pc, #412]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 0207 	bic.w	r2, r3, #7
 800308a:	4965      	ldr	r1, [pc, #404]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0b8      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030bc:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d4:	4b53      	ldr	r3, [pc, #332]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4b50      	ldr	r3, [pc, #320]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	494d      	ldr	r1, [pc, #308]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d040      	beq.n	8003180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d115      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e07f      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e073      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06b      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4936      	ldr	r1, [pc, #216]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003150:	f7ff f912 	bl	8002378 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7ff f90e 	bl	8002378 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e053      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d210      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	4922      	ldr	r1, [pc, #136]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e032      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4916      	ldr	r1, [pc, #88]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	490e      	ldr	r1, [pc, #56]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ee:	f000 f821 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	490a      	ldr	r1, [pc, #40]	; (8003228 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	5ccb      	ldrb	r3, [r1, r3]
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	4a09      	ldr	r2, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1cc>)
 8003208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f870 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40022000 	.word	0x40022000
 8003224:	40021000 	.word	0x40021000
 8003228:	080053cc 	.word	0x080053cc
 800322c:	20000004 	.word	0x20000004
 8003230:	20000008 	.word	0x20000008

08003234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x30>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x36>
 8003262:	e027      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003266:	613b      	str	r3, [r7, #16]
      break;
 8003268:	e027      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0c5b      	lsrs	r3, r3, #17
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003296:	fb03 f202 	mul.w	r2, r3, r2
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e004      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	613b      	str	r3, [r7, #16]
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 80032b6:	613b      	str	r3, [r7, #16]
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	693b      	ldr	r3, [r7, #16]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	080053e4 	.word	0x080053e4
 80032d4:	080053f4 	.word	0x080053f4
 80032d8:	003d0900 	.word	0x003d0900

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b02      	ldr	r3, [pc, #8]	; (80032ec <HAL_RCC_GetHCLKFreq+0x10>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f4:	f7ff fff2 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	080053dc 	.word	0x080053dc

08003318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800331c:	f7ff ffde 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0adb      	lsrs	r3, r3, #11
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK2Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	080053dc 	.word	0x080053dc

08003340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <RCC_Delay+0x34>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <RCC_Delay+0x38>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0a5b      	lsrs	r3, r3, #9
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800335c:	bf00      	nop
  }
  while (Delay --);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	60fa      	str	r2, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f9      	bne.n	800335c <RCC_Delay+0x1c>
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000004 	.word	0x20000004
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e076      	b.n	800347c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339e:	d009      	beq.n	80033b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
 80033a6:	e005      	b.n	80033b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fe0e 	bl	8001ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	ea42 0103 	orr.w	r1, r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	0c1a      	lsrs	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f002 0204 	and.w	r2, r2, #4
 800345a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_SPI_Transmit+0x22>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e12d      	b.n	8003702 <HAL_SPI_Transmit+0x27e>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ae:	f7fe ff63 	bl	8002378 <HAL_GetTick>
 80034b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
 80034c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034c8:	e116      	b.n	80036f8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Transmit+0x52>
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034da:	e10d      	b.n	80036f8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003522:	d10f      	bne.n	8003544 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003542:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d007      	beq.n	8003562 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356a:	d14f      	bne.n	800360c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_SPI_Transmit+0xf6>
 8003574:	8afb      	ldrh	r3, [r7, #22]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d142      	bne.n	8003600 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	881a      	ldrh	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	1c9a      	adds	r2, r3, #2
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800359e:	e02f      	b.n	8003600 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d112      	bne.n	80035d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	1c9a      	adds	r2, r3, #2
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80035d2:	e015      	b.n	8003600 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d4:	f7fe fed0 	bl	8002378 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d803      	bhi.n	80035ec <HAL_SPI_Transmit+0x168>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x16e>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80035fe:	e07b      	b.n	80036f8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ca      	bne.n	80035a0 <HAL_SPI_Transmit+0x11c>
 800360a:	e050      	b.n	80036ae <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_SPI_Transmit+0x196>
 8003614:	8afb      	ldrh	r3, [r7, #22]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d144      	bne.n	80036a4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	7812      	ldrb	r2, [r2, #0]
 8003626:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003640:	e030      	b.n	80036a4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b02      	cmp	r3, #2
 800364e:	d113      	bne.n	8003678 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	86da      	strh	r2, [r3, #54]	; 0x36
 8003676:	e015      	b.n	80036a4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003678:	f7fe fe7e 	bl	8002378 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d803      	bhi.n	8003690 <HAL_SPI_Transmit+0x20c>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d102      	bne.n	8003696 <HAL_SPI_Transmit+0x212>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036a2:	e029      	b.n	80036f8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1c9      	bne.n	8003642 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fbcc 	bl	8003e50 <SPI_EndRxTxTransaction>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	e003      	b.n	80036f8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003700:	7ffb      	ldrb	r3, [r7, #31]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b088      	sub	sp, #32
 800370e:	af02      	add	r7, sp, #8
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d002      	beq.n	8003730 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800372e:	e0fb      	b.n	8003928 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003738:	d112      	bne.n	8003760 <HAL_SPI_Receive+0x56>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2204      	movs	r2, #4
 8003746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8ef 	bl	800393a <HAL_SPI_TransmitReceive>
 800375c:	4603      	mov	r3, r0
 800375e:	e0e8      	b.n	8003932 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_SPI_Receive+0x64>
 800376a:	2302      	movs	r3, #2
 800376c:	e0e1      	b.n	8003932 <HAL_SPI_Receive+0x228>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003776:	f7fe fdff 	bl	8002378 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_SPI_Receive+0x7e>
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800378c:	e0cc      	b.n	8003928 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2204      	movs	r2, #4
 8003792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d4:	d10f      	bne.n	80037f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d007      	beq.n	8003814 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d16a      	bne.n	80038f2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800381c:	e032      	b.n	8003884 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d115      	bne.n	8003858 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f103 020c 	add.w	r2, r3, #12
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	7812      	ldrb	r2, [r2, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003856:	e015      	b.n	8003884 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003858:	f7fe fd8e 	bl	8002378 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d803      	bhi.n	8003870 <HAL_SPI_Receive+0x166>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d102      	bne.n	8003876 <HAL_SPI_Receive+0x16c>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003882:	e051      	b.n	8003928 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1c7      	bne.n	800381e <HAL_SPI_Receive+0x114>
 800388e:	e035      	b.n	80038fc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d113      	bne.n	80038c6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	b292      	uxth	r2, r2
 80038aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038c4:	e015      	b.n	80038f2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c6:	f7fe fd57 	bl	8002378 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d803      	bhi.n	80038de <HAL_SPI_Receive+0x1d4>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d102      	bne.n	80038e4 <HAL_SPI_Receive+0x1da>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80038f0:	e01a      	b.n	8003928 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1c9      	bne.n	8003890 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fa53 	bl	8003dac <SPI_EndRxTransaction>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
 800391e:	e003      	b.n	8003928 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b08c      	sub	sp, #48	; 0x30
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003948:	2301      	movs	r3, #1
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x26>
 800395c:	2302      	movs	r3, #2
 800395e:	e198      	b.n	8003c92 <HAL_SPI_TransmitReceive+0x358>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003968:	f7fe fd06 	bl	8002378 <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003986:	2b01      	cmp	r3, #1
 8003988:	d00f      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x70>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003990:	d107      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x68>
 800399a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d003      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
 80039a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039a8:	e16d      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_SPI_TransmitReceive+0x82>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_TransmitReceive+0x82>
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039c2:	e160      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d003      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2205      	movs	r2, #5
 80039d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	887a      	ldrh	r2, [r7, #2]
 80039e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	887a      	ldrh	r2, [r7, #2]
 80039fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d007      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a34:	d17c      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x10a>
 8003a3e:	8b7b      	ldrh	r3, [r7, #26]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d16a      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a68:	e057      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d11b      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x176>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d016      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x176>
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d113      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d119      	bne.n	8003af2 <HAL_SPI_TransmitReceive+0x1b8>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d014      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	1c9a      	adds	r2, r3, #2
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aee:	2301      	movs	r3, #1
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003af2:	f7fe fc41 	bl	8002378 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d80b      	bhi.n	8003b1a <HAL_SPI_TransmitReceive+0x1e0>
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d007      	beq.n	8003b1a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003b18:	e0b5      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1a2      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x130>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d19d      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x130>
 8003b2e:	e080      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x204>
 8003b38:	8b7b      	ldrh	r3, [r7, #26]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d16f      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	7812      	ldrb	r2, [r2, #0]
 8003b4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b64:	e05b      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d11c      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x274>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d017      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x274>
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d114      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	7812      	ldrb	r2, [r2, #0]
 8003b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d119      	bne.n	8003bf0 <HAL_SPI_TransmitReceive+0x2b6>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d014      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bec:	2301      	movs	r3, #1
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bf0:	f7fe fbc2 	bl	8002378 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d803      	bhi.n	8003c08 <HAL_SPI_TransmitReceive+0x2ce>
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d102      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x2d4>
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c1c:	e033      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d19e      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x22c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d199      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f90a 	bl	8003e50 <SPI_EndRxTxTransaction>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c4e:	e01a      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7c:	e003      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3730      	adds	r7, #48	; 0x30
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cac:	f7fe fb64 	bl	8002378 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cbc:	f7fe fb5c 	bl	8002378 <HAL_GetTick>
 8003cc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	015b      	lsls	r3, r3, #5
 8003cc8:	0d1b      	lsrs	r3, r3, #20
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	fb02 f303 	mul.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd2:	e054      	b.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d050      	beq.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cdc:	f7fe fb4c 	bl	8002378 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d902      	bls.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d13d      	bne.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0a:	d111      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d14:	d004      	beq.n	8003d20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d107      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d38:	d10f      	bne.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e017      	b.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d19b      	bne.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000004 	.word	0x20000004

08003dac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc0:	d111      	bne.n	8003de6 <SPI_EndRxTransaction+0x3a>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dca:	d004      	beq.n	8003dd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd4:	d107      	bne.n	8003de6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dee:	d117      	bne.n	8003e20 <SPI_EndRxTransaction+0x74>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d112      	bne.n	8003e20 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2101      	movs	r1, #1
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff ff49 	bl	8003c9c <SPI_WaitFlagStateUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01a      	beq.n	8003e46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e013      	b.n	8003e48 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff ff36 	bl	8003c9c <SPI_WaitFlagStateUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e000      	b.n	8003e48 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff ff18 	bl	8003c9c <SPI_WaitFlagStateUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e000      	b.n	8003e84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e042      	b.n	8003f24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe f8e6 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f91d 	bl	8004110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d16d      	bne.n	8004028 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Transmit+0x2c>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e066      	b.n	800402a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2221      	movs	r2, #33	; 0x21
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6a:	f7fe fa05 	bl	8002378 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f84:	d108      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e003      	b.n	8003fa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fa0:	e02a      	b.n	8003ff8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f840 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e036      	b.n	800402a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e007      	b.n	8003fea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1cf      	bne.n	8003fa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	2140      	movs	r1, #64	; 0x40
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f810 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e006      	b.n	800402a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b090      	sub	sp, #64	; 0x40
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004042:	e050      	b.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	d04c      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800404c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x30>
 8004052:	f7fe f991 	bl	8002378 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405e:	429a      	cmp	r2, r3
 8004060:	d241      	bcs.n	80040e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004082:	637a      	str	r2, [r7, #52]	; 0x34
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e5      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	613b      	str	r3, [r7, #16]
   return(result);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040b6:	623a      	str	r2, [r7, #32]
 80040b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	69f9      	ldr	r1, [r7, #28]
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e00f      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	429a      	cmp	r2, r3
 8004102:	d09f      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3740      	adds	r7, #64	; 0x40
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800414a:	f023 030c 	bic.w	r3, r3, #12
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	430b      	orrs	r3, r1
 8004156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <UART_SetConfig+0x114>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d103      	bne.n	8004180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004178:	f7ff f8ce 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	e002      	b.n	8004186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7ff f8b6 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8004184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009a      	lsls	r2, r3, #2
 8004190:	441a      	add	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	4a22      	ldr	r2, [pc, #136]	; (8004228 <UART_SetConfig+0x118>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	0119      	lsls	r1, r3, #4
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009a      	lsls	r2, r3, #2
 80041b0:	441a      	add	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <UART_SetConfig+0x118>)
 80041be:	fba3 0302 	umull	r0, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2064      	movs	r0, #100	; 0x64
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	3332      	adds	r3, #50	; 0x32
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <UART_SetConfig+0x118>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041dc:	4419      	add	r1, r3
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009a      	lsls	r2, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <UART_SetConfig+0x118>)
 80041f6:	fba3 0302 	umull	r0, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2064      	movs	r0, #100	; 0x64
 80041fe:	fb00 f303 	mul.w	r3, r0, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	3332      	adds	r3, #50	; 0x32
 8004208:	4a07      	ldr	r2, [pc, #28]	; (8004228 <UART_SetConfig+0x118>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	f003 020f 	and.w	r2, r3, #15
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	440a      	add	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40013800 	.word	0x40013800
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <__errno>:
 800422c:	4b01      	ldr	r3, [pc, #4]	; (8004234 <__errno+0x8>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000010 	.word	0x20000010

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	2600      	movs	r6, #0
 800423c:	4d0c      	ldr	r5, [pc, #48]	; (8004270 <__libc_init_array+0x38>)
 800423e:	4c0d      	ldr	r4, [pc, #52]	; (8004274 <__libc_init_array+0x3c>)
 8004240:	1b64      	subs	r4, r4, r5
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	42a6      	cmp	r6, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	f000 ffb6 	bl	80051b8 <_init>
 800424c:	2600      	movs	r6, #0
 800424e:	4d0a      	ldr	r5, [pc, #40]	; (8004278 <__libc_init_array+0x40>)
 8004250:	4c0a      	ldr	r4, [pc, #40]	; (800427c <__libc_init_array+0x44>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	42a6      	cmp	r6, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004260:	4798      	blx	r3
 8004262:	3601      	adds	r6, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	f855 3b04 	ldr.w	r3, [r5], #4
 800426a:	4798      	blx	r3
 800426c:	3601      	adds	r6, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	08005490 	.word	0x08005490
 8004274:	08005490 	.word	0x08005490
 8004278:	08005490 	.word	0x08005490
 800427c:	08005494 	.word	0x08005494

08004280 <memset>:
 8004280:	4603      	mov	r3, r0
 8004282:	4402      	add	r2, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	d100      	bne.n	800428a <memset+0xa>
 8004288:	4770      	bx	lr
 800428a:	f803 1b01 	strb.w	r1, [r3], #1
 800428e:	e7f9      	b.n	8004284 <memset+0x4>

08004290 <iprintf>:
 8004290:	b40f      	push	{r0, r1, r2, r3}
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <iprintf+0x2c>)
 8004294:	b513      	push	{r0, r1, r4, lr}
 8004296:	681c      	ldr	r4, [r3, #0]
 8004298:	b124      	cbz	r4, 80042a4 <iprintf+0x14>
 800429a:	69a3      	ldr	r3, [r4, #24]
 800429c:	b913      	cbnz	r3, 80042a4 <iprintf+0x14>
 800429e:	4620      	mov	r0, r4
 80042a0:	f000 f866 	bl	8004370 <__sinit>
 80042a4:	ab05      	add	r3, sp, #20
 80042a6:	4620      	mov	r0, r4
 80042a8:	9a04      	ldr	r2, [sp, #16]
 80042aa:	68a1      	ldr	r1, [r4, #8]
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	f000 f9bb 	bl	8004628 <_vfiprintf_r>
 80042b2:	b002      	add	sp, #8
 80042b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b8:	b004      	add	sp, #16
 80042ba:	4770      	bx	lr
 80042bc:	20000010 	.word	0x20000010

080042c0 <std>:
 80042c0:	2300      	movs	r3, #0
 80042c2:	b510      	push	{r4, lr}
 80042c4:	4604      	mov	r4, r0
 80042c6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ce:	6083      	str	r3, [r0, #8]
 80042d0:	8181      	strh	r1, [r0, #12]
 80042d2:	6643      	str	r3, [r0, #100]	; 0x64
 80042d4:	81c2      	strh	r2, [r0, #14]
 80042d6:	6183      	str	r3, [r0, #24]
 80042d8:	4619      	mov	r1, r3
 80042da:	2208      	movs	r2, #8
 80042dc:	305c      	adds	r0, #92	; 0x5c
 80042de:	f7ff ffcf 	bl	8004280 <memset>
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <std+0x38>)
 80042e4:	6224      	str	r4, [r4, #32]
 80042e6:	6263      	str	r3, [r4, #36]	; 0x24
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <std+0x3c>)
 80042ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <std+0x40>)
 80042ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <std+0x44>)
 80042f2:	6323      	str	r3, [r4, #48]	; 0x30
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	bf00      	nop
 80042f8:	08004bd5 	.word	0x08004bd5
 80042fc:	08004bf7 	.word	0x08004bf7
 8004300:	08004c2f 	.word	0x08004c2f
 8004304:	08004c53 	.word	0x08004c53

08004308 <_cleanup_r>:
 8004308:	4901      	ldr	r1, [pc, #4]	; (8004310 <_cleanup_r+0x8>)
 800430a:	f000 b8af 	b.w	800446c <_fwalk_reent>
 800430e:	bf00      	nop
 8004310:	08004f25 	.word	0x08004f25

08004314 <__sfmoreglue>:
 8004314:	2268      	movs	r2, #104	; 0x68
 8004316:	b570      	push	{r4, r5, r6, lr}
 8004318:	1e4d      	subs	r5, r1, #1
 800431a:	4355      	muls	r5, r2
 800431c:	460e      	mov	r6, r1
 800431e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004322:	f000 f8e5 	bl	80044f0 <_malloc_r>
 8004326:	4604      	mov	r4, r0
 8004328:	b140      	cbz	r0, 800433c <__sfmoreglue+0x28>
 800432a:	2100      	movs	r1, #0
 800432c:	e9c0 1600 	strd	r1, r6, [r0]
 8004330:	300c      	adds	r0, #12
 8004332:	60a0      	str	r0, [r4, #8]
 8004334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004338:	f7ff ffa2 	bl	8004280 <memset>
 800433c:	4620      	mov	r0, r4
 800433e:	bd70      	pop	{r4, r5, r6, pc}

08004340 <__sfp_lock_acquire>:
 8004340:	4801      	ldr	r0, [pc, #4]	; (8004348 <__sfp_lock_acquire+0x8>)
 8004342:	f000 b8b3 	b.w	80044ac <__retarget_lock_acquire_recursive>
 8004346:	bf00      	nop
 8004348:	200001a1 	.word	0x200001a1

0800434c <__sfp_lock_release>:
 800434c:	4801      	ldr	r0, [pc, #4]	; (8004354 <__sfp_lock_release+0x8>)
 800434e:	f000 b8ae 	b.w	80044ae <__retarget_lock_release_recursive>
 8004352:	bf00      	nop
 8004354:	200001a1 	.word	0x200001a1

08004358 <__sinit_lock_acquire>:
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <__sinit_lock_acquire+0x8>)
 800435a:	f000 b8a7 	b.w	80044ac <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	200001a2 	.word	0x200001a2

08004364 <__sinit_lock_release>:
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <__sinit_lock_release+0x8>)
 8004366:	f000 b8a2 	b.w	80044ae <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	200001a2 	.word	0x200001a2

08004370 <__sinit>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4604      	mov	r4, r0
 8004374:	f7ff fff0 	bl	8004358 <__sinit_lock_acquire>
 8004378:	69a3      	ldr	r3, [r4, #24]
 800437a:	b11b      	cbz	r3, 8004384 <__sinit+0x14>
 800437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004380:	f7ff bff0 	b.w	8004364 <__sinit_lock_release>
 8004384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004388:	6523      	str	r3, [r4, #80]	; 0x50
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <__sinit+0x68>)
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <__sinit+0x6c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	62a2      	str	r2, [r4, #40]	; 0x28
 8004392:	42a3      	cmp	r3, r4
 8004394:	bf08      	it	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	4620      	mov	r0, r4
 800439a:	bf08      	it	eq
 800439c:	61a3      	streq	r3, [r4, #24]
 800439e:	f000 f81f 	bl	80043e0 <__sfp>
 80043a2:	6060      	str	r0, [r4, #4]
 80043a4:	4620      	mov	r0, r4
 80043a6:	f000 f81b 	bl	80043e0 <__sfp>
 80043aa:	60a0      	str	r0, [r4, #8]
 80043ac:	4620      	mov	r0, r4
 80043ae:	f000 f817 	bl	80043e0 <__sfp>
 80043b2:	2200      	movs	r2, #0
 80043b4:	2104      	movs	r1, #4
 80043b6:	60e0      	str	r0, [r4, #12]
 80043b8:	6860      	ldr	r0, [r4, #4]
 80043ba:	f7ff ff81 	bl	80042c0 <std>
 80043be:	2201      	movs	r2, #1
 80043c0:	2109      	movs	r1, #9
 80043c2:	68a0      	ldr	r0, [r4, #8]
 80043c4:	f7ff ff7c 	bl	80042c0 <std>
 80043c8:	2202      	movs	r2, #2
 80043ca:	2112      	movs	r1, #18
 80043cc:	68e0      	ldr	r0, [r4, #12]
 80043ce:	f7ff ff77 	bl	80042c0 <std>
 80043d2:	2301      	movs	r3, #1
 80043d4:	61a3      	str	r3, [r4, #24]
 80043d6:	e7d1      	b.n	800437c <__sinit+0xc>
 80043d8:	080053f8 	.word	0x080053f8
 80043dc:	08004309 	.word	0x08004309

080043e0 <__sfp>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	4607      	mov	r7, r0
 80043e4:	f7ff ffac 	bl	8004340 <__sfp_lock_acquire>
 80043e8:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <__sfp+0x84>)
 80043ea:	681e      	ldr	r6, [r3, #0]
 80043ec:	69b3      	ldr	r3, [r6, #24]
 80043ee:	b913      	cbnz	r3, 80043f6 <__sfp+0x16>
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff ffbd 	bl	8004370 <__sinit>
 80043f6:	3648      	adds	r6, #72	; 0x48
 80043f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	d503      	bpl.n	8004408 <__sfp+0x28>
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	b30b      	cbz	r3, 8004448 <__sfp+0x68>
 8004404:	6836      	ldr	r6, [r6, #0]
 8004406:	e7f7      	b.n	80043f8 <__sfp+0x18>
 8004408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800440c:	b9d5      	cbnz	r5, 8004444 <__sfp+0x64>
 800440e:	4b16      	ldr	r3, [pc, #88]	; (8004468 <__sfp+0x88>)
 8004410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004414:	60e3      	str	r3, [r4, #12]
 8004416:	6665      	str	r5, [r4, #100]	; 0x64
 8004418:	f000 f847 	bl	80044aa <__retarget_lock_init_recursive>
 800441c:	f7ff ff96 	bl	800434c <__sfp_lock_release>
 8004420:	2208      	movs	r2, #8
 8004422:	4629      	mov	r1, r5
 8004424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800442c:	6025      	str	r5, [r4, #0]
 800442e:	61a5      	str	r5, [r4, #24]
 8004430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004434:	f7ff ff24 	bl	8004280 <memset>
 8004438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800443c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004440:	4620      	mov	r0, r4
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004444:	3468      	adds	r4, #104	; 0x68
 8004446:	e7d9      	b.n	80043fc <__sfp+0x1c>
 8004448:	2104      	movs	r1, #4
 800444a:	4638      	mov	r0, r7
 800444c:	f7ff ff62 	bl	8004314 <__sfmoreglue>
 8004450:	4604      	mov	r4, r0
 8004452:	6030      	str	r0, [r6, #0]
 8004454:	2800      	cmp	r0, #0
 8004456:	d1d5      	bne.n	8004404 <__sfp+0x24>
 8004458:	f7ff ff78 	bl	800434c <__sfp_lock_release>
 800445c:	230c      	movs	r3, #12
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	e7ee      	b.n	8004440 <__sfp+0x60>
 8004462:	bf00      	nop
 8004464:	080053f8 	.word	0x080053f8
 8004468:	ffff0001 	.word	0xffff0001

0800446c <_fwalk_reent>:
 800446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004470:	4606      	mov	r6, r0
 8004472:	4688      	mov	r8, r1
 8004474:	2700      	movs	r7, #0
 8004476:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800447a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800447e:	f1b9 0901 	subs.w	r9, r9, #1
 8004482:	d505      	bpl.n	8004490 <_fwalk_reent+0x24>
 8004484:	6824      	ldr	r4, [r4, #0]
 8004486:	2c00      	cmp	r4, #0
 8004488:	d1f7      	bne.n	800447a <_fwalk_reent+0xe>
 800448a:	4638      	mov	r0, r7
 800448c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004490:	89ab      	ldrh	r3, [r5, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d907      	bls.n	80044a6 <_fwalk_reent+0x3a>
 8004496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800449a:	3301      	adds	r3, #1
 800449c:	d003      	beq.n	80044a6 <_fwalk_reent+0x3a>
 800449e:	4629      	mov	r1, r5
 80044a0:	4630      	mov	r0, r6
 80044a2:	47c0      	blx	r8
 80044a4:	4307      	orrs	r7, r0
 80044a6:	3568      	adds	r5, #104	; 0x68
 80044a8:	e7e9      	b.n	800447e <_fwalk_reent+0x12>

080044aa <__retarget_lock_init_recursive>:
 80044aa:	4770      	bx	lr

080044ac <__retarget_lock_acquire_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_release_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <sbrk_aligned>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0e      	ldr	r6, [pc, #56]	; (80044ec <sbrk_aligned+0x3c>)
 80044b4:	460c      	mov	r4, r1
 80044b6:	6831      	ldr	r1, [r6, #0]
 80044b8:	4605      	mov	r5, r0
 80044ba:	b911      	cbnz	r1, 80044c2 <sbrk_aligned+0x12>
 80044bc:	f000 fb7a 	bl	8004bb4 <_sbrk_r>
 80044c0:	6030      	str	r0, [r6, #0]
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 fb75 	bl	8004bb4 <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d00a      	beq.n	80044e4 <sbrk_aligned+0x34>
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d007      	beq.n	80044e8 <sbrk_aligned+0x38>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fb6a 	bl	8004bb4 <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d101      	bne.n	80044e8 <sbrk_aligned+0x38>
 80044e4:	f04f 34ff 	mov.w	r4, #4294967295
 80044e8:	4620      	mov	r0, r4
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	200001a8 	.word	0x200001a8

080044f0 <_malloc_r>:
 80044f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f4:	1ccd      	adds	r5, r1, #3
 80044f6:	f025 0503 	bic.w	r5, r5, #3
 80044fa:	3508      	adds	r5, #8
 80044fc:	2d0c      	cmp	r5, #12
 80044fe:	bf38      	it	cc
 8004500:	250c      	movcc	r5, #12
 8004502:	2d00      	cmp	r5, #0
 8004504:	4607      	mov	r7, r0
 8004506:	db01      	blt.n	800450c <_malloc_r+0x1c>
 8004508:	42a9      	cmp	r1, r5
 800450a:	d905      	bls.n	8004518 <_malloc_r+0x28>
 800450c:	230c      	movs	r3, #12
 800450e:	2600      	movs	r6, #0
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	4630      	mov	r0, r6
 8004514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004518:	4e2e      	ldr	r6, [pc, #184]	; (80045d4 <_malloc_r+0xe4>)
 800451a:	f000 fdc5 	bl	80050a8 <__malloc_lock>
 800451e:	6833      	ldr	r3, [r6, #0]
 8004520:	461c      	mov	r4, r3
 8004522:	bb34      	cbnz	r4, 8004572 <_malloc_r+0x82>
 8004524:	4629      	mov	r1, r5
 8004526:	4638      	mov	r0, r7
 8004528:	f7ff ffc2 	bl	80044b0 <sbrk_aligned>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	4604      	mov	r4, r0
 8004530:	d14d      	bne.n	80045ce <_malloc_r+0xde>
 8004532:	6834      	ldr	r4, [r6, #0]
 8004534:	4626      	mov	r6, r4
 8004536:	2e00      	cmp	r6, #0
 8004538:	d140      	bne.n	80045bc <_malloc_r+0xcc>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	4631      	mov	r1, r6
 800453e:	4638      	mov	r0, r7
 8004540:	eb04 0803 	add.w	r8, r4, r3
 8004544:	f000 fb36 	bl	8004bb4 <_sbrk_r>
 8004548:	4580      	cmp	r8, r0
 800454a:	d13a      	bne.n	80045c2 <_malloc_r+0xd2>
 800454c:	6821      	ldr	r1, [r4, #0]
 800454e:	3503      	adds	r5, #3
 8004550:	1a6d      	subs	r5, r5, r1
 8004552:	f025 0503 	bic.w	r5, r5, #3
 8004556:	3508      	adds	r5, #8
 8004558:	2d0c      	cmp	r5, #12
 800455a:	bf38      	it	cc
 800455c:	250c      	movcc	r5, #12
 800455e:	4638      	mov	r0, r7
 8004560:	4629      	mov	r1, r5
 8004562:	f7ff ffa5 	bl	80044b0 <sbrk_aligned>
 8004566:	3001      	adds	r0, #1
 8004568:	d02b      	beq.n	80045c2 <_malloc_r+0xd2>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	442b      	add	r3, r5
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	e00e      	b.n	8004590 <_malloc_r+0xa0>
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	1b52      	subs	r2, r2, r5
 8004576:	d41e      	bmi.n	80045b6 <_malloc_r+0xc6>
 8004578:	2a0b      	cmp	r2, #11
 800457a:	d916      	bls.n	80045aa <_malloc_r+0xba>
 800457c:	1961      	adds	r1, r4, r5
 800457e:	42a3      	cmp	r3, r4
 8004580:	6025      	str	r5, [r4, #0]
 8004582:	bf18      	it	ne
 8004584:	6059      	strne	r1, [r3, #4]
 8004586:	6863      	ldr	r3, [r4, #4]
 8004588:	bf08      	it	eq
 800458a:	6031      	streq	r1, [r6, #0]
 800458c:	5162      	str	r2, [r4, r5]
 800458e:	604b      	str	r3, [r1, #4]
 8004590:	4638      	mov	r0, r7
 8004592:	f104 060b 	add.w	r6, r4, #11
 8004596:	f000 fd8d 	bl	80050b4 <__malloc_unlock>
 800459a:	f026 0607 	bic.w	r6, r6, #7
 800459e:	1d23      	adds	r3, r4, #4
 80045a0:	1af2      	subs	r2, r6, r3
 80045a2:	d0b6      	beq.n	8004512 <_malloc_r+0x22>
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	50a3      	str	r3, [r4, r2]
 80045a8:	e7b3      	b.n	8004512 <_malloc_r+0x22>
 80045aa:	6862      	ldr	r2, [r4, #4]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	bf0c      	ite	eq
 80045b0:	6032      	streq	r2, [r6, #0]
 80045b2:	605a      	strne	r2, [r3, #4]
 80045b4:	e7ec      	b.n	8004590 <_malloc_r+0xa0>
 80045b6:	4623      	mov	r3, r4
 80045b8:	6864      	ldr	r4, [r4, #4]
 80045ba:	e7b2      	b.n	8004522 <_malloc_r+0x32>
 80045bc:	4634      	mov	r4, r6
 80045be:	6876      	ldr	r6, [r6, #4]
 80045c0:	e7b9      	b.n	8004536 <_malloc_r+0x46>
 80045c2:	230c      	movs	r3, #12
 80045c4:	4638      	mov	r0, r7
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	f000 fd74 	bl	80050b4 <__malloc_unlock>
 80045cc:	e7a1      	b.n	8004512 <_malloc_r+0x22>
 80045ce:	6025      	str	r5, [r4, #0]
 80045d0:	e7de      	b.n	8004590 <_malloc_r+0xa0>
 80045d2:	bf00      	nop
 80045d4:	200001a4 	.word	0x200001a4

080045d8 <__sfputc_r>:
 80045d8:	6893      	ldr	r3, [r2, #8]
 80045da:	b410      	push	{r4}
 80045dc:	3b01      	subs	r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	6093      	str	r3, [r2, #8]
 80045e2:	da07      	bge.n	80045f4 <__sfputc_r+0x1c>
 80045e4:	6994      	ldr	r4, [r2, #24]
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	db01      	blt.n	80045ee <__sfputc_r+0x16>
 80045ea:	290a      	cmp	r1, #10
 80045ec:	d102      	bne.n	80045f4 <__sfputc_r+0x1c>
 80045ee:	bc10      	pop	{r4}
 80045f0:	f000 bb34 	b.w	8004c5c <__swbuf_r>
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	1c58      	adds	r0, r3, #1
 80045f8:	6010      	str	r0, [r2, #0]
 80045fa:	7019      	strb	r1, [r3, #0]
 80045fc:	4608      	mov	r0, r1
 80045fe:	bc10      	pop	{r4}
 8004600:	4770      	bx	lr

08004602 <__sfputs_r>:
 8004602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	4614      	mov	r4, r2
 800460a:	18d5      	adds	r5, r2, r3
 800460c:	42ac      	cmp	r4, r5
 800460e:	d101      	bne.n	8004614 <__sfputs_r+0x12>
 8004610:	2000      	movs	r0, #0
 8004612:	e007      	b.n	8004624 <__sfputs_r+0x22>
 8004614:	463a      	mov	r2, r7
 8004616:	4630      	mov	r0, r6
 8004618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461c:	f7ff ffdc 	bl	80045d8 <__sfputc_r>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d1f3      	bne.n	800460c <__sfputs_r+0xa>
 8004624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004628 <_vfiprintf_r>:
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	460d      	mov	r5, r1
 800462e:	4614      	mov	r4, r2
 8004630:	4698      	mov	r8, r3
 8004632:	4606      	mov	r6, r0
 8004634:	b09d      	sub	sp, #116	; 0x74
 8004636:	b118      	cbz	r0, 8004640 <_vfiprintf_r+0x18>
 8004638:	6983      	ldr	r3, [r0, #24]
 800463a:	b90b      	cbnz	r3, 8004640 <_vfiprintf_r+0x18>
 800463c:	f7ff fe98 	bl	8004370 <__sinit>
 8004640:	4b89      	ldr	r3, [pc, #548]	; (8004868 <_vfiprintf_r+0x240>)
 8004642:	429d      	cmp	r5, r3
 8004644:	d11b      	bne.n	800467e <_vfiprintf_r+0x56>
 8004646:	6875      	ldr	r5, [r6, #4]
 8004648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800464a:	07d9      	lsls	r1, r3, #31
 800464c:	d405      	bmi.n	800465a <_vfiprintf_r+0x32>
 800464e:	89ab      	ldrh	r3, [r5, #12]
 8004650:	059a      	lsls	r2, r3, #22
 8004652:	d402      	bmi.n	800465a <_vfiprintf_r+0x32>
 8004654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004656:	f7ff ff29 	bl	80044ac <__retarget_lock_acquire_recursive>
 800465a:	89ab      	ldrh	r3, [r5, #12]
 800465c:	071b      	lsls	r3, r3, #28
 800465e:	d501      	bpl.n	8004664 <_vfiprintf_r+0x3c>
 8004660:	692b      	ldr	r3, [r5, #16]
 8004662:	b9eb      	cbnz	r3, 80046a0 <_vfiprintf_r+0x78>
 8004664:	4629      	mov	r1, r5
 8004666:	4630      	mov	r0, r6
 8004668:	f000 fb5c 	bl	8004d24 <__swsetup_r>
 800466c:	b1c0      	cbz	r0, 80046a0 <_vfiprintf_r+0x78>
 800466e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004670:	07dc      	lsls	r4, r3, #31
 8004672:	d50e      	bpl.n	8004692 <_vfiprintf_r+0x6a>
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	b01d      	add	sp, #116	; 0x74
 800467a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467e:	4b7b      	ldr	r3, [pc, #492]	; (800486c <_vfiprintf_r+0x244>)
 8004680:	429d      	cmp	r5, r3
 8004682:	d101      	bne.n	8004688 <_vfiprintf_r+0x60>
 8004684:	68b5      	ldr	r5, [r6, #8]
 8004686:	e7df      	b.n	8004648 <_vfiprintf_r+0x20>
 8004688:	4b79      	ldr	r3, [pc, #484]	; (8004870 <_vfiprintf_r+0x248>)
 800468a:	429d      	cmp	r5, r3
 800468c:	bf08      	it	eq
 800468e:	68f5      	ldreq	r5, [r6, #12]
 8004690:	e7da      	b.n	8004648 <_vfiprintf_r+0x20>
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	0598      	lsls	r0, r3, #22
 8004696:	d4ed      	bmi.n	8004674 <_vfiprintf_r+0x4c>
 8004698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800469a:	f7ff ff08 	bl	80044ae <__retarget_lock_release_recursive>
 800469e:	e7e9      	b.n	8004674 <_vfiprintf_r+0x4c>
 80046a0:	2300      	movs	r3, #0
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	2320      	movs	r3, #32
 80046a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046aa:	2330      	movs	r3, #48	; 0x30
 80046ac:	f04f 0901 	mov.w	r9, #1
 80046b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004874 <_vfiprintf_r+0x24c>
 80046b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046bc:	4623      	mov	r3, r4
 80046be:	469a      	mov	sl, r3
 80046c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c4:	b10a      	cbz	r2, 80046ca <_vfiprintf_r+0xa2>
 80046c6:	2a25      	cmp	r2, #37	; 0x25
 80046c8:	d1f9      	bne.n	80046be <_vfiprintf_r+0x96>
 80046ca:	ebba 0b04 	subs.w	fp, sl, r4
 80046ce:	d00b      	beq.n	80046e8 <_vfiprintf_r+0xc0>
 80046d0:	465b      	mov	r3, fp
 80046d2:	4622      	mov	r2, r4
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7ff ff93 	bl	8004602 <__sfputs_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	f000 80aa 	beq.w	8004836 <_vfiprintf_r+0x20e>
 80046e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046e4:	445a      	add	r2, fp
 80046e6:	9209      	str	r2, [sp, #36]	; 0x24
 80046e8:	f89a 3000 	ldrb.w	r3, [sl]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a2 	beq.w	8004836 <_vfiprintf_r+0x20e>
 80046f2:	2300      	movs	r3, #0
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046fc:	f10a 0a01 	add.w	sl, sl, #1
 8004700:	9304      	str	r3, [sp, #16]
 8004702:	9307      	str	r3, [sp, #28]
 8004704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004708:	931a      	str	r3, [sp, #104]	; 0x68
 800470a:	4654      	mov	r4, sl
 800470c:	2205      	movs	r2, #5
 800470e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004712:	4858      	ldr	r0, [pc, #352]	; (8004874 <_vfiprintf_r+0x24c>)
 8004714:	f000 fcba 	bl	800508c <memchr>
 8004718:	9a04      	ldr	r2, [sp, #16]
 800471a:	b9d8      	cbnz	r0, 8004754 <_vfiprintf_r+0x12c>
 800471c:	06d1      	lsls	r1, r2, #27
 800471e:	bf44      	itt	mi
 8004720:	2320      	movmi	r3, #32
 8004722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004726:	0713      	lsls	r3, r2, #28
 8004728:	bf44      	itt	mi
 800472a:	232b      	movmi	r3, #43	; 0x2b
 800472c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004730:	f89a 3000 	ldrb.w	r3, [sl]
 8004734:	2b2a      	cmp	r3, #42	; 0x2a
 8004736:	d015      	beq.n	8004764 <_vfiprintf_r+0x13c>
 8004738:	4654      	mov	r4, sl
 800473a:	2000      	movs	r0, #0
 800473c:	f04f 0c0a 	mov.w	ip, #10
 8004740:	9a07      	ldr	r2, [sp, #28]
 8004742:	4621      	mov	r1, r4
 8004744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004748:	3b30      	subs	r3, #48	; 0x30
 800474a:	2b09      	cmp	r3, #9
 800474c:	d94e      	bls.n	80047ec <_vfiprintf_r+0x1c4>
 800474e:	b1b0      	cbz	r0, 800477e <_vfiprintf_r+0x156>
 8004750:	9207      	str	r2, [sp, #28]
 8004752:	e014      	b.n	800477e <_vfiprintf_r+0x156>
 8004754:	eba0 0308 	sub.w	r3, r0, r8
 8004758:	fa09 f303 	lsl.w	r3, r9, r3
 800475c:	4313      	orrs	r3, r2
 800475e:	46a2      	mov	sl, r4
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	e7d2      	b.n	800470a <_vfiprintf_r+0xe2>
 8004764:	9b03      	ldr	r3, [sp, #12]
 8004766:	1d19      	adds	r1, r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	9103      	str	r1, [sp, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	bfbb      	ittet	lt
 8004770:	425b      	neglt	r3, r3
 8004772:	f042 0202 	orrlt.w	r2, r2, #2
 8004776:	9307      	strge	r3, [sp, #28]
 8004778:	9307      	strlt	r3, [sp, #28]
 800477a:	bfb8      	it	lt
 800477c:	9204      	strlt	r2, [sp, #16]
 800477e:	7823      	ldrb	r3, [r4, #0]
 8004780:	2b2e      	cmp	r3, #46	; 0x2e
 8004782:	d10c      	bne.n	800479e <_vfiprintf_r+0x176>
 8004784:	7863      	ldrb	r3, [r4, #1]
 8004786:	2b2a      	cmp	r3, #42	; 0x2a
 8004788:	d135      	bne.n	80047f6 <_vfiprintf_r+0x1ce>
 800478a:	9b03      	ldr	r3, [sp, #12]
 800478c:	3402      	adds	r4, #2
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	9203      	str	r2, [sp, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	bfb8      	it	lt
 8004798:	f04f 33ff 	movlt.w	r3, #4294967295
 800479c:	9305      	str	r3, [sp, #20]
 800479e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004878 <_vfiprintf_r+0x250>
 80047a2:	2203      	movs	r2, #3
 80047a4:	4650      	mov	r0, sl
 80047a6:	7821      	ldrb	r1, [r4, #0]
 80047a8:	f000 fc70 	bl	800508c <memchr>
 80047ac:	b140      	cbz	r0, 80047c0 <_vfiprintf_r+0x198>
 80047ae:	2340      	movs	r3, #64	; 0x40
 80047b0:	eba0 000a 	sub.w	r0, r0, sl
 80047b4:	fa03 f000 	lsl.w	r0, r3, r0
 80047b8:	9b04      	ldr	r3, [sp, #16]
 80047ba:	3401      	adds	r4, #1
 80047bc:	4303      	orrs	r3, r0
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c4:	2206      	movs	r2, #6
 80047c6:	482d      	ldr	r0, [pc, #180]	; (800487c <_vfiprintf_r+0x254>)
 80047c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047cc:	f000 fc5e 	bl	800508c <memchr>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d03f      	beq.n	8004854 <_vfiprintf_r+0x22c>
 80047d4:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <_vfiprintf_r+0x258>)
 80047d6:	bb1b      	cbnz	r3, 8004820 <_vfiprintf_r+0x1f8>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	3307      	adds	r3, #7
 80047dc:	f023 0307 	bic.w	r3, r3, #7
 80047e0:	3308      	adds	r3, #8
 80047e2:	9303      	str	r3, [sp, #12]
 80047e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e6:	443b      	add	r3, r7
 80047e8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ea:	e767      	b.n	80046bc <_vfiprintf_r+0x94>
 80047ec:	460c      	mov	r4, r1
 80047ee:	2001      	movs	r0, #1
 80047f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047f4:	e7a5      	b.n	8004742 <_vfiprintf_r+0x11a>
 80047f6:	2300      	movs	r3, #0
 80047f8:	f04f 0c0a 	mov.w	ip, #10
 80047fc:	4619      	mov	r1, r3
 80047fe:	3401      	adds	r4, #1
 8004800:	9305      	str	r3, [sp, #20]
 8004802:	4620      	mov	r0, r4
 8004804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004808:	3a30      	subs	r2, #48	; 0x30
 800480a:	2a09      	cmp	r2, #9
 800480c:	d903      	bls.n	8004816 <_vfiprintf_r+0x1ee>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0c5      	beq.n	800479e <_vfiprintf_r+0x176>
 8004812:	9105      	str	r1, [sp, #20]
 8004814:	e7c3      	b.n	800479e <_vfiprintf_r+0x176>
 8004816:	4604      	mov	r4, r0
 8004818:	2301      	movs	r3, #1
 800481a:	fb0c 2101 	mla	r1, ip, r1, r2
 800481e:	e7f0      	b.n	8004802 <_vfiprintf_r+0x1da>
 8004820:	ab03      	add	r3, sp, #12
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	462a      	mov	r2, r5
 8004826:	4630      	mov	r0, r6
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <_vfiprintf_r+0x25c>)
 800482a:	a904      	add	r1, sp, #16
 800482c:	f3af 8000 	nop.w
 8004830:	4607      	mov	r7, r0
 8004832:	1c78      	adds	r0, r7, #1
 8004834:	d1d6      	bne.n	80047e4 <_vfiprintf_r+0x1bc>
 8004836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004838:	07d9      	lsls	r1, r3, #31
 800483a:	d405      	bmi.n	8004848 <_vfiprintf_r+0x220>
 800483c:	89ab      	ldrh	r3, [r5, #12]
 800483e:	059a      	lsls	r2, r3, #22
 8004840:	d402      	bmi.n	8004848 <_vfiprintf_r+0x220>
 8004842:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004844:	f7ff fe33 	bl	80044ae <__retarget_lock_release_recursive>
 8004848:	89ab      	ldrh	r3, [r5, #12]
 800484a:	065b      	lsls	r3, r3, #25
 800484c:	f53f af12 	bmi.w	8004674 <_vfiprintf_r+0x4c>
 8004850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004852:	e711      	b.n	8004678 <_vfiprintf_r+0x50>
 8004854:	ab03      	add	r3, sp, #12
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	462a      	mov	r2, r5
 800485a:	4630      	mov	r0, r6
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <_vfiprintf_r+0x25c>)
 800485e:	a904      	add	r1, sp, #16
 8004860:	f000 f882 	bl	8004968 <_printf_i>
 8004864:	e7e4      	b.n	8004830 <_vfiprintf_r+0x208>
 8004866:	bf00      	nop
 8004868:	0800541c 	.word	0x0800541c
 800486c:	0800543c 	.word	0x0800543c
 8004870:	080053fc 	.word	0x080053fc
 8004874:	0800545c 	.word	0x0800545c
 8004878:	08005462 	.word	0x08005462
 800487c:	08005466 	.word	0x08005466
 8004880:	00000000 	.word	0x00000000
 8004884:	08004603 	.word	0x08004603

08004888 <_printf_common>:
 8004888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	4616      	mov	r6, r2
 800488e:	4699      	mov	r9, r3
 8004890:	688a      	ldr	r2, [r1, #8]
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	4607      	mov	r7, r0
 8004896:	4293      	cmp	r3, r2
 8004898:	bfb8      	it	lt
 800489a:	4613      	movlt	r3, r2
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048a2:	460c      	mov	r4, r1
 80048a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a8:	b10a      	cbz	r2, 80048ae <_printf_common+0x26>
 80048aa:	3301      	adds	r3, #1
 80048ac:	6033      	str	r3, [r6, #0]
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	0699      	lsls	r1, r3, #26
 80048b2:	bf42      	ittt	mi
 80048b4:	6833      	ldrmi	r3, [r6, #0]
 80048b6:	3302      	addmi	r3, #2
 80048b8:	6033      	strmi	r3, [r6, #0]
 80048ba:	6825      	ldr	r5, [r4, #0]
 80048bc:	f015 0506 	ands.w	r5, r5, #6
 80048c0:	d106      	bne.n	80048d0 <_printf_common+0x48>
 80048c2:	f104 0a19 	add.w	sl, r4, #25
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	6832      	ldr	r2, [r6, #0]
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	42ab      	cmp	r3, r5
 80048ce:	dc28      	bgt.n	8004922 <_printf_common+0x9a>
 80048d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d4:	1e13      	subs	r3, r2, #0
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	bf18      	it	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	0692      	lsls	r2, r2, #26
 80048de:	d42d      	bmi.n	800493c <_printf_common+0xb4>
 80048e0:	4649      	mov	r1, r9
 80048e2:	4638      	mov	r0, r7
 80048e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e8:	47c0      	blx	r8
 80048ea:	3001      	adds	r0, #1
 80048ec:	d020      	beq.n	8004930 <_printf_common+0xa8>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	68e5      	ldr	r5, [r4, #12]
 80048f2:	f003 0306 	and.w	r3, r3, #6
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf18      	it	ne
 80048fa:	2500      	movne	r5, #0
 80048fc:	6832      	ldr	r2, [r6, #0]
 80048fe:	f04f 0600 	mov.w	r6, #0
 8004902:	68a3      	ldr	r3, [r4, #8]
 8004904:	bf08      	it	eq
 8004906:	1aad      	subeq	r5, r5, r2
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	bf08      	it	eq
 800490c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004910:	4293      	cmp	r3, r2
 8004912:	bfc4      	itt	gt
 8004914:	1a9b      	subgt	r3, r3, r2
 8004916:	18ed      	addgt	r5, r5, r3
 8004918:	341a      	adds	r4, #26
 800491a:	42b5      	cmp	r5, r6
 800491c:	d11a      	bne.n	8004954 <_printf_common+0xcc>
 800491e:	2000      	movs	r0, #0
 8004920:	e008      	b.n	8004934 <_printf_common+0xac>
 8004922:	2301      	movs	r3, #1
 8004924:	4652      	mov	r2, sl
 8004926:	4649      	mov	r1, r9
 8004928:	4638      	mov	r0, r7
 800492a:	47c0      	blx	r8
 800492c:	3001      	adds	r0, #1
 800492e:	d103      	bne.n	8004938 <_printf_common+0xb0>
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	3501      	adds	r5, #1
 800493a:	e7c4      	b.n	80048c6 <_printf_common+0x3e>
 800493c:	2030      	movs	r0, #48	; 0x30
 800493e:	18e1      	adds	r1, r4, r3
 8004940:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800494a:	4422      	add	r2, r4
 800494c:	3302      	adds	r3, #2
 800494e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004952:	e7c5      	b.n	80048e0 <_printf_common+0x58>
 8004954:	2301      	movs	r3, #1
 8004956:	4622      	mov	r2, r4
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	47c0      	blx	r8
 800495e:	3001      	adds	r0, #1
 8004960:	d0e6      	beq.n	8004930 <_printf_common+0xa8>
 8004962:	3601      	adds	r6, #1
 8004964:	e7d9      	b.n	800491a <_printf_common+0x92>
	...

08004968 <_printf_i>:
 8004968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	7e0f      	ldrb	r7, [r1, #24]
 800496e:	4691      	mov	r9, r2
 8004970:	2f78      	cmp	r7, #120	; 0x78
 8004972:	4680      	mov	r8, r0
 8004974:	460c      	mov	r4, r1
 8004976:	469a      	mov	sl, r3
 8004978:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800497a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800497e:	d807      	bhi.n	8004990 <_printf_i+0x28>
 8004980:	2f62      	cmp	r7, #98	; 0x62
 8004982:	d80a      	bhi.n	800499a <_printf_i+0x32>
 8004984:	2f00      	cmp	r7, #0
 8004986:	f000 80d9 	beq.w	8004b3c <_printf_i+0x1d4>
 800498a:	2f58      	cmp	r7, #88	; 0x58
 800498c:	f000 80a4 	beq.w	8004ad8 <_printf_i+0x170>
 8004990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004998:	e03a      	b.n	8004a10 <_printf_i+0xa8>
 800499a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800499e:	2b15      	cmp	r3, #21
 80049a0:	d8f6      	bhi.n	8004990 <_printf_i+0x28>
 80049a2:	a101      	add	r1, pc, #4	; (adr r1, 80049a8 <_printf_i+0x40>)
 80049a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004991 	.word	0x08004991
 80049b4:	08004991 	.word	0x08004991
 80049b8:	08004991 	.word	0x08004991
 80049bc:	08004991 	.word	0x08004991
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004991 	.word	0x08004991
 80049c8:	08004991 	.word	0x08004991
 80049cc:	08004991 	.word	0x08004991
 80049d0:	08004991 	.word	0x08004991
 80049d4:	08004b23 	.word	0x08004b23
 80049d8:	08004a45 	.word	0x08004a45
 80049dc:	08004b05 	.word	0x08004b05
 80049e0:	08004991 	.word	0x08004991
 80049e4:	08004991 	.word	0x08004991
 80049e8:	08004b45 	.word	0x08004b45
 80049ec:	08004991 	.word	0x08004991
 80049f0:	08004a45 	.word	0x08004a45
 80049f4:	08004991 	.word	0x08004991
 80049f8:	08004991 	.word	0x08004991
 80049fc:	08004b0d 	.word	0x08004b0d
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	602a      	str	r2, [r5, #0]
 8004a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0a4      	b.n	8004b5e <_printf_i+0x1f6>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	6829      	ldr	r1, [r5, #0]
 8004a18:	0606      	lsls	r6, r0, #24
 8004a1a:	f101 0304 	add.w	r3, r1, #4
 8004a1e:	d50a      	bpl.n	8004a36 <_printf_i+0xce>
 8004a20:	680e      	ldr	r6, [r1, #0]
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	2e00      	cmp	r6, #0
 8004a26:	da03      	bge.n	8004a30 <_printf_i+0xc8>
 8004a28:	232d      	movs	r3, #45	; 0x2d
 8004a2a:	4276      	negs	r6, r6
 8004a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a30:	230a      	movs	r3, #10
 8004a32:	485e      	ldr	r0, [pc, #376]	; (8004bac <_printf_i+0x244>)
 8004a34:	e019      	b.n	8004a6a <_printf_i+0x102>
 8004a36:	680e      	ldr	r6, [r1, #0]
 8004a38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a3c:	602b      	str	r3, [r5, #0]
 8004a3e:	bf18      	it	ne
 8004a40:	b236      	sxthne	r6, r6
 8004a42:	e7ef      	b.n	8004a24 <_printf_i+0xbc>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	1d19      	adds	r1, r3, #4
 8004a4a:	6029      	str	r1, [r5, #0]
 8004a4c:	0601      	lsls	r1, r0, #24
 8004a4e:	d501      	bpl.n	8004a54 <_printf_i+0xec>
 8004a50:	681e      	ldr	r6, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <_printf_i+0xf2>
 8004a54:	0646      	lsls	r6, r0, #25
 8004a56:	d5fb      	bpl.n	8004a50 <_printf_i+0xe8>
 8004a58:	881e      	ldrh	r6, [r3, #0]
 8004a5a:	2f6f      	cmp	r7, #111	; 0x6f
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2308      	moveq	r3, #8
 8004a60:	230a      	movne	r3, #10
 8004a62:	4852      	ldr	r0, [pc, #328]	; (8004bac <_printf_i+0x244>)
 8004a64:	2100      	movs	r1, #0
 8004a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a6a:	6865      	ldr	r5, [r4, #4]
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	bfa8      	it	ge
 8004a70:	6821      	ldrge	r1, [r4, #0]
 8004a72:	60a5      	str	r5, [r4, #8]
 8004a74:	bfa4      	itt	ge
 8004a76:	f021 0104 	bicge.w	r1, r1, #4
 8004a7a:	6021      	strge	r1, [r4, #0]
 8004a7c:	b90e      	cbnz	r6, 8004a82 <_printf_i+0x11a>
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	d04d      	beq.n	8004b1e <_printf_i+0x1b6>
 8004a82:	4615      	mov	r5, r2
 8004a84:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a88:	fb03 6711 	mls	r7, r3, r1, r6
 8004a8c:	5dc7      	ldrb	r7, [r0, r7]
 8004a8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a92:	4637      	mov	r7, r6
 8004a94:	42bb      	cmp	r3, r7
 8004a96:	460e      	mov	r6, r1
 8004a98:	d9f4      	bls.n	8004a84 <_printf_i+0x11c>
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d10b      	bne.n	8004ab6 <_printf_i+0x14e>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	07de      	lsls	r6, r3, #31
 8004aa2:	d508      	bpl.n	8004ab6 <_printf_i+0x14e>
 8004aa4:	6923      	ldr	r3, [r4, #16]
 8004aa6:	6861      	ldr	r1, [r4, #4]
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	bfde      	ittt	le
 8004aac:	2330      	movle	r3, #48	; 0x30
 8004aae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ab2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ab6:	1b52      	subs	r2, r2, r5
 8004ab8:	6122      	str	r2, [r4, #16]
 8004aba:	464b      	mov	r3, r9
 8004abc:	4621      	mov	r1, r4
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f8cd a000 	str.w	sl, [sp]
 8004ac4:	aa03      	add	r2, sp, #12
 8004ac6:	f7ff fedf 	bl	8004888 <_printf_common>
 8004aca:	3001      	adds	r0, #1
 8004acc:	d14c      	bne.n	8004b68 <_printf_i+0x200>
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad2:	b004      	add	sp, #16
 8004ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad8:	4834      	ldr	r0, [pc, #208]	; (8004bac <_printf_i+0x244>)
 8004ada:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ade:	6829      	ldr	r1, [r5, #0]
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ae6:	6029      	str	r1, [r5, #0]
 8004ae8:	061d      	lsls	r5, r3, #24
 8004aea:	d514      	bpl.n	8004b16 <_printf_i+0x1ae>
 8004aec:	07df      	lsls	r7, r3, #31
 8004aee:	bf44      	itt	mi
 8004af0:	f043 0320 	orrmi.w	r3, r3, #32
 8004af4:	6023      	strmi	r3, [r4, #0]
 8004af6:	b91e      	cbnz	r6, 8004b00 <_printf_i+0x198>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	2310      	movs	r3, #16
 8004b02:	e7af      	b.n	8004a64 <_printf_i+0xfc>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	f043 0320 	orr.w	r3, r3, #32
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	2378      	movs	r3, #120	; 0x78
 8004b0e:	4828      	ldr	r0, [pc, #160]	; (8004bb0 <_printf_i+0x248>)
 8004b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b14:	e7e3      	b.n	8004ade <_printf_i+0x176>
 8004b16:	0659      	lsls	r1, r3, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2b6      	uxthmi	r6, r6
 8004b1c:	e7e6      	b.n	8004aec <_printf_i+0x184>
 8004b1e:	4615      	mov	r5, r2
 8004b20:	e7bb      	b.n	8004a9a <_printf_i+0x132>
 8004b22:	682b      	ldr	r3, [r5, #0]
 8004b24:	6826      	ldr	r6, [r4, #0]
 8004b26:	1d18      	adds	r0, r3, #4
 8004b28:	6961      	ldr	r1, [r4, #20]
 8004b2a:	6028      	str	r0, [r5, #0]
 8004b2c:	0635      	lsls	r5, r6, #24
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	d501      	bpl.n	8004b36 <_printf_i+0x1ce>
 8004b32:	6019      	str	r1, [r3, #0]
 8004b34:	e002      	b.n	8004b3c <_printf_i+0x1d4>
 8004b36:	0670      	lsls	r0, r6, #25
 8004b38:	d5fb      	bpl.n	8004b32 <_printf_i+0x1ca>
 8004b3a:	8019      	strh	r1, [r3, #0]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4615      	mov	r5, r2
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	e7ba      	b.n	8004aba <_printf_i+0x152>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	2100      	movs	r1, #0
 8004b48:	1d1a      	adds	r2, r3, #4
 8004b4a:	602a      	str	r2, [r5, #0]
 8004b4c:	681d      	ldr	r5, [r3, #0]
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 fa9b 	bl	800508c <memchr>
 8004b56:	b108      	cbz	r0, 8004b5c <_printf_i+0x1f4>
 8004b58:	1b40      	subs	r0, r0, r5
 8004b5a:	6060      	str	r0, [r4, #4]
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	2300      	movs	r3, #0
 8004b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b66:	e7a8      	b.n	8004aba <_printf_i+0x152>
 8004b68:	462a      	mov	r2, r5
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	47d0      	blx	sl
 8004b72:	3001      	adds	r0, #1
 8004b74:	d0ab      	beq.n	8004ace <_printf_i+0x166>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	079b      	lsls	r3, r3, #30
 8004b7a:	d413      	bmi.n	8004ba4 <_printf_i+0x23c>
 8004b7c:	68e0      	ldr	r0, [r4, #12]
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	4298      	cmp	r0, r3
 8004b82:	bfb8      	it	lt
 8004b84:	4618      	movlt	r0, r3
 8004b86:	e7a4      	b.n	8004ad2 <_printf_i+0x16a>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4632      	mov	r2, r6
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	4640      	mov	r0, r8
 8004b90:	47d0      	blx	sl
 8004b92:	3001      	adds	r0, #1
 8004b94:	d09b      	beq.n	8004ace <_printf_i+0x166>
 8004b96:	3501      	adds	r5, #1
 8004b98:	68e3      	ldr	r3, [r4, #12]
 8004b9a:	9903      	ldr	r1, [sp, #12]
 8004b9c:	1a5b      	subs	r3, r3, r1
 8004b9e:	42ab      	cmp	r3, r5
 8004ba0:	dcf2      	bgt.n	8004b88 <_printf_i+0x220>
 8004ba2:	e7eb      	b.n	8004b7c <_printf_i+0x214>
 8004ba4:	2500      	movs	r5, #0
 8004ba6:	f104 0619 	add.w	r6, r4, #25
 8004baa:	e7f5      	b.n	8004b98 <_printf_i+0x230>
 8004bac:	0800546d 	.word	0x0800546d
 8004bb0:	0800547e 	.word	0x0800547e

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4d05      	ldr	r5, [pc, #20]	; (8004bd0 <_sbrk_r+0x1c>)
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fd fb20 	bl	8002204 <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200001ac 	.word	0x200001ac

08004bd4 <__sread>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	f000 fab8 	bl	8005150 <_read_r>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	bfab      	itete	ge
 8004be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004be6:	89a3      	ldrhlt	r3, [r4, #12]
 8004be8:	181b      	addge	r3, r3, r0
 8004bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bee:	bfac      	ite	ge
 8004bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bf2:	81a3      	strhlt	r3, [r4, #12]
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <__swrite>:
 8004bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	898b      	ldrh	r3, [r1, #12]
 8004bfe:	4605      	mov	r5, r0
 8004c00:	05db      	lsls	r3, r3, #23
 8004c02:	460c      	mov	r4, r1
 8004c04:	4616      	mov	r6, r2
 8004c06:	d505      	bpl.n	8004c14 <__swrite+0x1e>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c10:	f000 f9c4 	bl	8004f9c <_lseek_r>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	4632      	mov	r2, r6
 8004c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	4628      	mov	r0, r5
 8004c20:	463b      	mov	r3, r7
 8004c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2a:	f000 b869 	b.w	8004d00 <_write_r>

08004c2e <__sseek>:
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	460c      	mov	r4, r1
 8004c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c36:	f000 f9b1 	bl	8004f9c <_lseek_r>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	bf15      	itete	ne
 8004c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c4a:	81a3      	strheq	r3, [r4, #12]
 8004c4c:	bf18      	it	ne
 8004c4e:	81a3      	strhne	r3, [r4, #12]
 8004c50:	bd10      	pop	{r4, pc}

08004c52 <__sclose>:
 8004c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c56:	f000 b8d3 	b.w	8004e00 <_close_r>
	...

08004c5c <__swbuf_r>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	460e      	mov	r6, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	4605      	mov	r5, r0
 8004c64:	b118      	cbz	r0, 8004c6e <__swbuf_r+0x12>
 8004c66:	6983      	ldr	r3, [r0, #24]
 8004c68:	b90b      	cbnz	r3, 8004c6e <__swbuf_r+0x12>
 8004c6a:	f7ff fb81 	bl	8004370 <__sinit>
 8004c6e:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <__swbuf_r+0x98>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	d12b      	bne.n	8004ccc <__swbuf_r+0x70>
 8004c74:	686c      	ldr	r4, [r5, #4]
 8004c76:	69a3      	ldr	r3, [r4, #24]
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	071a      	lsls	r2, r3, #28
 8004c7e:	d52f      	bpl.n	8004ce0 <__swbuf_r+0x84>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	b36b      	cbz	r3, 8004ce0 <__swbuf_r+0x84>
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	b2f6      	uxtb	r6, r6
 8004c8a:	1ac0      	subs	r0, r0, r3
 8004c8c:	6963      	ldr	r3, [r4, #20]
 8004c8e:	4637      	mov	r7, r6
 8004c90:	4283      	cmp	r3, r0
 8004c92:	dc04      	bgt.n	8004c9e <__swbuf_r+0x42>
 8004c94:	4621      	mov	r1, r4
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 f944 	bl	8004f24 <_fflush_r>
 8004c9c:	bb30      	cbnz	r0, 8004cec <__swbuf_r+0x90>
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	60a3      	str	r3, [r4, #8]
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	701e      	strb	r6, [r3, #0]
 8004cae:	6963      	ldr	r3, [r4, #20]
 8004cb0:	4283      	cmp	r3, r0
 8004cb2:	d004      	beq.n	8004cbe <__swbuf_r+0x62>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	07db      	lsls	r3, r3, #31
 8004cb8:	d506      	bpl.n	8004cc8 <__swbuf_r+0x6c>
 8004cba:	2e0a      	cmp	r6, #10
 8004cbc:	d104      	bne.n	8004cc8 <__swbuf_r+0x6c>
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f000 f92f 	bl	8004f24 <_fflush_r>
 8004cc6:	b988      	cbnz	r0, 8004cec <__swbuf_r+0x90>
 8004cc8:	4638      	mov	r0, r7
 8004cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <__swbuf_r+0x9c>)
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	d101      	bne.n	8004cd6 <__swbuf_r+0x7a>
 8004cd2:	68ac      	ldr	r4, [r5, #8]
 8004cd4:	e7cf      	b.n	8004c76 <__swbuf_r+0x1a>
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <__swbuf_r+0xa0>)
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	bf08      	it	eq
 8004cdc:	68ec      	ldreq	r4, [r5, #12]
 8004cde:	e7ca      	b.n	8004c76 <__swbuf_r+0x1a>
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f81e 	bl	8004d24 <__swsetup_r>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d0cb      	beq.n	8004c84 <__swbuf_r+0x28>
 8004cec:	f04f 37ff 	mov.w	r7, #4294967295
 8004cf0:	e7ea      	b.n	8004cc8 <__swbuf_r+0x6c>
 8004cf2:	bf00      	nop
 8004cf4:	0800541c 	.word	0x0800541c
 8004cf8:	0800543c 	.word	0x0800543c
 8004cfc:	080053fc 	.word	0x080053fc

08004d00 <_write_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4d05      	ldr	r5, [pc, #20]	; (8004d20 <_write_r+0x20>)
 8004d0c:	602a      	str	r2, [r5, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fd f8e2 	bl	8001ed8 <_write>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_write_r+0x1e>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_write_r+0x1e>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	200001ac 	.word	0x200001ac

08004d24 <__swsetup_r>:
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <__swsetup_r+0xcc>)
 8004d26:	b570      	push	{r4, r5, r6, lr}
 8004d28:	681d      	ldr	r5, [r3, #0]
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	b125      	cbz	r5, 8004d3a <__swsetup_r+0x16>
 8004d30:	69ab      	ldr	r3, [r5, #24]
 8004d32:	b913      	cbnz	r3, 8004d3a <__swsetup_r+0x16>
 8004d34:	4628      	mov	r0, r5
 8004d36:	f7ff fb1b 	bl	8004370 <__sinit>
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <__swsetup_r+0xd0>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	d10f      	bne.n	8004d60 <__swsetup_r+0x3c>
 8004d40:	686c      	ldr	r4, [r5, #4]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d48:	0719      	lsls	r1, r3, #28
 8004d4a:	d42c      	bmi.n	8004da6 <__swsetup_r+0x82>
 8004d4c:	06dd      	lsls	r5, r3, #27
 8004d4e:	d411      	bmi.n	8004d74 <__swsetup_r+0x50>
 8004d50:	2309      	movs	r3, #9
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	e03e      	b.n	8004dde <__swsetup_r+0xba>
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <__swsetup_r+0xd4>)
 8004d62:	429c      	cmp	r4, r3
 8004d64:	d101      	bne.n	8004d6a <__swsetup_r+0x46>
 8004d66:	68ac      	ldr	r4, [r5, #8]
 8004d68:	e7eb      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <__swsetup_r+0xd8>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	bf08      	it	eq
 8004d70:	68ec      	ldreq	r4, [r5, #12]
 8004d72:	e7e6      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d74:	0758      	lsls	r0, r3, #29
 8004d76:	d512      	bpl.n	8004d9e <__swsetup_r+0x7a>
 8004d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d7a:	b141      	cbz	r1, 8004d8e <__swsetup_r+0x6a>
 8004d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d002      	beq.n	8004d8a <__swsetup_r+0x66>
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f99b 	bl	80050c0 <_free_r>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	b94b      	cbnz	r3, 8004dbe <__swsetup_r+0x9a>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d003      	beq.n	8004dbe <__swsetup_r+0x9a>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f927 	bl	800500c <__smakebuf_r>
 8004dbe:	89a0      	ldrh	r0, [r4, #12]
 8004dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dc4:	f010 0301 	ands.w	r3, r0, #1
 8004dc8:	d00a      	beq.n	8004de0 <__swsetup_r+0xbc>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60a3      	str	r3, [r4, #8]
 8004dce:	6963      	ldr	r3, [r4, #20]
 8004dd0:	425b      	negs	r3, r3
 8004dd2:	61a3      	str	r3, [r4, #24]
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	b943      	cbnz	r3, 8004dea <__swsetup_r+0xc6>
 8004dd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ddc:	d1ba      	bne.n	8004d54 <__swsetup_r+0x30>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	0781      	lsls	r1, r0, #30
 8004de2:	bf58      	it	pl
 8004de4:	6963      	ldrpl	r3, [r4, #20]
 8004de6:	60a3      	str	r3, [r4, #8]
 8004de8:	e7f4      	b.n	8004dd4 <__swsetup_r+0xb0>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e7f7      	b.n	8004dde <__swsetup_r+0xba>
 8004dee:	bf00      	nop
 8004df0:	20000010 	.word	0x20000010
 8004df4:	0800541c 	.word	0x0800541c
 8004df8:	0800543c 	.word	0x0800543c
 8004dfc:	080053fc 	.word	0x080053fc

08004e00 <_close_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	2300      	movs	r3, #0
 8004e04:	4d05      	ldr	r5, [pc, #20]	; (8004e1c <_close_r+0x1c>)
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fd f9ca 	bl	80021a4 <_close>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_close_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_close_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	200001ac 	.word	0x200001ac

08004e20 <__sflush_r>:
 8004e20:	898a      	ldrh	r2, [r1, #12]
 8004e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e24:	4605      	mov	r5, r0
 8004e26:	0710      	lsls	r0, r2, #28
 8004e28:	460c      	mov	r4, r1
 8004e2a:	d457      	bmi.n	8004edc <__sflush_r+0xbc>
 8004e2c:	684b      	ldr	r3, [r1, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dc04      	bgt.n	8004e3c <__sflush_r+0x1c>
 8004e32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	dc01      	bgt.n	8004e3c <__sflush_r+0x1c>
 8004e38:	2000      	movs	r0, #0
 8004e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d0fa      	beq.n	8004e38 <__sflush_r+0x18>
 8004e42:	2300      	movs	r3, #0
 8004e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e48:	682f      	ldr	r7, [r5, #0]
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	d032      	beq.n	8004eb4 <__sflush_r+0x94>
 8004e4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	075a      	lsls	r2, r3, #29
 8004e54:	d505      	bpl.n	8004e62 <__sflush_r+0x42>
 8004e56:	6863      	ldr	r3, [r4, #4]
 8004e58:	1ac0      	subs	r0, r0, r3
 8004e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e5c:	b10b      	cbz	r3, 8004e62 <__sflush_r+0x42>
 8004e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e60:	1ac0      	subs	r0, r0, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	4602      	mov	r2, r0
 8004e66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e68:	4628      	mov	r0, r5
 8004e6a:	6a21      	ldr	r1, [r4, #32]
 8004e6c:	47b0      	blx	r6
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	d106      	bne.n	8004e82 <__sflush_r+0x62>
 8004e74:	6829      	ldr	r1, [r5, #0]
 8004e76:	291d      	cmp	r1, #29
 8004e78:	d82c      	bhi.n	8004ed4 <__sflush_r+0xb4>
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <__sflush_r+0x100>)
 8004e7c:	40ca      	lsrs	r2, r1
 8004e7e:	07d6      	lsls	r6, r2, #31
 8004e80:	d528      	bpl.n	8004ed4 <__sflush_r+0xb4>
 8004e82:	2200      	movs	r2, #0
 8004e84:	6062      	str	r2, [r4, #4]
 8004e86:	6922      	ldr	r2, [r4, #16]
 8004e88:	04d9      	lsls	r1, r3, #19
 8004e8a:	6022      	str	r2, [r4, #0]
 8004e8c:	d504      	bpl.n	8004e98 <__sflush_r+0x78>
 8004e8e:	1c42      	adds	r2, r0, #1
 8004e90:	d101      	bne.n	8004e96 <__sflush_r+0x76>
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	b903      	cbnz	r3, 8004e98 <__sflush_r+0x78>
 8004e96:	6560      	str	r0, [r4, #84]	; 0x54
 8004e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9a:	602f      	str	r7, [r5, #0]
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	d0cb      	beq.n	8004e38 <__sflush_r+0x18>
 8004ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea4:	4299      	cmp	r1, r3
 8004ea6:	d002      	beq.n	8004eae <__sflush_r+0x8e>
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f000 f909 	bl	80050c0 <_free_r>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8004eb2:	e7c2      	b.n	8004e3a <__sflush_r+0x1a>
 8004eb4:	6a21      	ldr	r1, [r4, #32]
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b0      	blx	r6
 8004ebc:	1c41      	adds	r1, r0, #1
 8004ebe:	d1c7      	bne.n	8004e50 <__sflush_r+0x30>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0c4      	beq.n	8004e50 <__sflush_r+0x30>
 8004ec6:	2b1d      	cmp	r3, #29
 8004ec8:	d001      	beq.n	8004ece <__sflush_r+0xae>
 8004eca:	2b16      	cmp	r3, #22
 8004ecc:	d101      	bne.n	8004ed2 <__sflush_r+0xb2>
 8004ece:	602f      	str	r7, [r5, #0]
 8004ed0:	e7b2      	b.n	8004e38 <__sflush_r+0x18>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	e7ae      	b.n	8004e3a <__sflush_r+0x1a>
 8004edc:	690f      	ldr	r7, [r1, #16]
 8004ede:	2f00      	cmp	r7, #0
 8004ee0:	d0aa      	beq.n	8004e38 <__sflush_r+0x18>
 8004ee2:	0793      	lsls	r3, r2, #30
 8004ee4:	bf18      	it	ne
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	680e      	ldr	r6, [r1, #0]
 8004eea:	bf08      	it	eq
 8004eec:	694b      	ldreq	r3, [r1, #20]
 8004eee:	1bf6      	subs	r6, r6, r7
 8004ef0:	600f      	str	r7, [r1, #0]
 8004ef2:	608b      	str	r3, [r1, #8]
 8004ef4:	2e00      	cmp	r6, #0
 8004ef6:	dd9f      	ble.n	8004e38 <__sflush_r+0x18>
 8004ef8:	4633      	mov	r3, r6
 8004efa:	463a      	mov	r2, r7
 8004efc:	4628      	mov	r0, r5
 8004efe:	6a21      	ldr	r1, [r4, #32]
 8004f00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004f04:	47e0      	blx	ip
 8004f06:	2800      	cmp	r0, #0
 8004f08:	dc06      	bgt.n	8004f18 <__sflush_r+0xf8>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	e790      	b.n	8004e3a <__sflush_r+0x1a>
 8004f18:	4407      	add	r7, r0
 8004f1a:	1a36      	subs	r6, r6, r0
 8004f1c:	e7ea      	b.n	8004ef4 <__sflush_r+0xd4>
 8004f1e:	bf00      	nop
 8004f20:	20400001 	.word	0x20400001

08004f24 <_fflush_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	690b      	ldr	r3, [r1, #16]
 8004f28:	4605      	mov	r5, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b913      	cbnz	r3, 8004f34 <_fflush_r+0x10>
 8004f2e:	2500      	movs	r5, #0
 8004f30:	4628      	mov	r0, r5
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	b118      	cbz	r0, 8004f3e <_fflush_r+0x1a>
 8004f36:	6983      	ldr	r3, [r0, #24]
 8004f38:	b90b      	cbnz	r3, 8004f3e <_fflush_r+0x1a>
 8004f3a:	f7ff fa19 	bl	8004370 <__sinit>
 8004f3e:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <_fflush_r+0x6c>)
 8004f40:	429c      	cmp	r4, r3
 8004f42:	d11b      	bne.n	8004f7c <_fflush_r+0x58>
 8004f44:	686c      	ldr	r4, [r5, #4]
 8004f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ef      	beq.n	8004f2e <_fflush_r+0xa>
 8004f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f50:	07d0      	lsls	r0, r2, #31
 8004f52:	d404      	bmi.n	8004f5e <_fflush_r+0x3a>
 8004f54:	0599      	lsls	r1, r3, #22
 8004f56:	d402      	bmi.n	8004f5e <_fflush_r+0x3a>
 8004f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f5a:	f7ff faa7 	bl	80044ac <__retarget_lock_acquire_recursive>
 8004f5e:	4628      	mov	r0, r5
 8004f60:	4621      	mov	r1, r4
 8004f62:	f7ff ff5d 	bl	8004e20 <__sflush_r>
 8004f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f68:	4605      	mov	r5, r0
 8004f6a:	07da      	lsls	r2, r3, #31
 8004f6c:	d4e0      	bmi.n	8004f30 <_fflush_r+0xc>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	059b      	lsls	r3, r3, #22
 8004f72:	d4dd      	bmi.n	8004f30 <_fflush_r+0xc>
 8004f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f76:	f7ff fa9a 	bl	80044ae <__retarget_lock_release_recursive>
 8004f7a:	e7d9      	b.n	8004f30 <_fflush_r+0xc>
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <_fflush_r+0x70>)
 8004f7e:	429c      	cmp	r4, r3
 8004f80:	d101      	bne.n	8004f86 <_fflush_r+0x62>
 8004f82:	68ac      	ldr	r4, [r5, #8]
 8004f84:	e7df      	b.n	8004f46 <_fflush_r+0x22>
 8004f86:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <_fflush_r+0x74>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	bf08      	it	eq
 8004f8c:	68ec      	ldreq	r4, [r5, #12]
 8004f8e:	e7da      	b.n	8004f46 <_fflush_r+0x22>
 8004f90:	0800541c 	.word	0x0800541c
 8004f94:	0800543c 	.word	0x0800543c
 8004f98:	080053fc 	.word	0x080053fc

08004f9c <_lseek_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4d05      	ldr	r5, [pc, #20]	; (8004fbc <_lseek_r+0x20>)
 8004fa8:	602a      	str	r2, [r5, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f7fd f91e 	bl	80021ec <_lseek>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_lseek_r+0x1e>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_lseek_r+0x1e>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	200001ac 	.word	0x200001ac

08004fc0 <__swhatbuf_r>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	460e      	mov	r6, r1
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	4614      	mov	r4, r2
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	461d      	mov	r5, r3
 8004fce:	b096      	sub	sp, #88	; 0x58
 8004fd0:	da08      	bge.n	8004fe4 <__swhatbuf_r+0x24>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fd8:	602a      	str	r2, [r5, #0]
 8004fda:	061a      	lsls	r2, r3, #24
 8004fdc:	d410      	bmi.n	8005000 <__swhatbuf_r+0x40>
 8004fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe2:	e00e      	b.n	8005002 <__swhatbuf_r+0x42>
 8004fe4:	466a      	mov	r2, sp
 8004fe6:	f000 f8c5 	bl	8005174 <_fstat_r>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	dbf1      	blt.n	8004fd2 <__swhatbuf_r+0x12>
 8004fee:	9a01      	ldr	r2, [sp, #4]
 8004ff0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ff4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ff8:	425a      	negs	r2, r3
 8004ffa:	415a      	adcs	r2, r3
 8004ffc:	602a      	str	r2, [r5, #0]
 8004ffe:	e7ee      	b.n	8004fde <__swhatbuf_r+0x1e>
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	2000      	movs	r0, #0
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	b016      	add	sp, #88	; 0x58
 8005008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800500c <__smakebuf_r>:
 800500c:	898b      	ldrh	r3, [r1, #12]
 800500e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005010:	079d      	lsls	r5, r3, #30
 8005012:	4606      	mov	r6, r0
 8005014:	460c      	mov	r4, r1
 8005016:	d507      	bpl.n	8005028 <__smakebuf_r+0x1c>
 8005018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	2301      	movs	r3, #1
 8005022:	6163      	str	r3, [r4, #20]
 8005024:	b002      	add	sp, #8
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	466a      	mov	r2, sp
 800502a:	ab01      	add	r3, sp, #4
 800502c:	f7ff ffc8 	bl	8004fc0 <__swhatbuf_r>
 8005030:	9900      	ldr	r1, [sp, #0]
 8005032:	4605      	mov	r5, r0
 8005034:	4630      	mov	r0, r6
 8005036:	f7ff fa5b 	bl	80044f0 <_malloc_r>
 800503a:	b948      	cbnz	r0, 8005050 <__smakebuf_r+0x44>
 800503c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005040:	059a      	lsls	r2, r3, #22
 8005042:	d4ef      	bmi.n	8005024 <__smakebuf_r+0x18>
 8005044:	f023 0303 	bic.w	r3, r3, #3
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	81a3      	strh	r3, [r4, #12]
 800504e:	e7e3      	b.n	8005018 <__smakebuf_r+0xc>
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <__smakebuf_r+0x7c>)
 8005052:	62b3      	str	r3, [r6, #40]	; 0x28
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	6020      	str	r0, [r4, #0]
 8005058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505c:	81a3      	strh	r3, [r4, #12]
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	6120      	str	r0, [r4, #16]
 8005062:	6163      	str	r3, [r4, #20]
 8005064:	9b01      	ldr	r3, [sp, #4]
 8005066:	b15b      	cbz	r3, 8005080 <__smakebuf_r+0x74>
 8005068:	4630      	mov	r0, r6
 800506a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506e:	f000 f893 	bl	8005198 <_isatty_r>
 8005072:	b128      	cbz	r0, 8005080 <__smakebuf_r+0x74>
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	89a0      	ldrh	r0, [r4, #12]
 8005082:	4305      	orrs	r5, r0
 8005084:	81a5      	strh	r5, [r4, #12]
 8005086:	e7cd      	b.n	8005024 <__smakebuf_r+0x18>
 8005088:	08004309 	.word	0x08004309

0800508c <memchr>:
 800508c:	4603      	mov	r3, r0
 800508e:	b510      	push	{r4, lr}
 8005090:	b2c9      	uxtb	r1, r1
 8005092:	4402      	add	r2, r0
 8005094:	4293      	cmp	r3, r2
 8005096:	4618      	mov	r0, r3
 8005098:	d101      	bne.n	800509e <memchr+0x12>
 800509a:	2000      	movs	r0, #0
 800509c:	e003      	b.n	80050a6 <memchr+0x1a>
 800509e:	7804      	ldrb	r4, [r0, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	428c      	cmp	r4, r1
 80050a4:	d1f6      	bne.n	8005094 <memchr+0x8>
 80050a6:	bd10      	pop	{r4, pc}

080050a8 <__malloc_lock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__malloc_lock+0x8>)
 80050aa:	f7ff b9ff 	b.w	80044ac <__retarget_lock_acquire_recursive>
 80050ae:	bf00      	nop
 80050b0:	200001a0 	.word	0x200001a0

080050b4 <__malloc_unlock>:
 80050b4:	4801      	ldr	r0, [pc, #4]	; (80050bc <__malloc_unlock+0x8>)
 80050b6:	f7ff b9fa 	b.w	80044ae <__retarget_lock_release_recursive>
 80050ba:	bf00      	nop
 80050bc:	200001a0 	.word	0x200001a0

080050c0 <_free_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4605      	mov	r5, r0
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d040      	beq.n	800514a <_free_r+0x8a>
 80050c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050cc:	1f0c      	subs	r4, r1, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfb8      	it	lt
 80050d2:	18e4      	addlt	r4, r4, r3
 80050d4:	f7ff ffe8 	bl	80050a8 <__malloc_lock>
 80050d8:	4a1c      	ldr	r2, [pc, #112]	; (800514c <_free_r+0x8c>)
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	b933      	cbnz	r3, 80050ec <_free_r+0x2c>
 80050de:	6063      	str	r3, [r4, #4]
 80050e0:	6014      	str	r4, [r2, #0]
 80050e2:	4628      	mov	r0, r5
 80050e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e8:	f7ff bfe4 	b.w	80050b4 <__malloc_unlock>
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d908      	bls.n	8005102 <_free_r+0x42>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	1821      	adds	r1, r4, r0
 80050f4:	428b      	cmp	r3, r1
 80050f6:	bf01      	itttt	eq
 80050f8:	6819      	ldreq	r1, [r3, #0]
 80050fa:	685b      	ldreq	r3, [r3, #4]
 80050fc:	1809      	addeq	r1, r1, r0
 80050fe:	6021      	streq	r1, [r4, #0]
 8005100:	e7ed      	b.n	80050de <_free_r+0x1e>
 8005102:	461a      	mov	r2, r3
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b10b      	cbz	r3, 800510c <_free_r+0x4c>
 8005108:	42a3      	cmp	r3, r4
 800510a:	d9fa      	bls.n	8005102 <_free_r+0x42>
 800510c:	6811      	ldr	r1, [r2, #0]
 800510e:	1850      	adds	r0, r2, r1
 8005110:	42a0      	cmp	r0, r4
 8005112:	d10b      	bne.n	800512c <_free_r+0x6c>
 8005114:	6820      	ldr	r0, [r4, #0]
 8005116:	4401      	add	r1, r0
 8005118:	1850      	adds	r0, r2, r1
 800511a:	4283      	cmp	r3, r0
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	d1e0      	bne.n	80050e2 <_free_r+0x22>
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4401      	add	r1, r0
 8005126:	6011      	str	r1, [r2, #0]
 8005128:	6053      	str	r3, [r2, #4]
 800512a:	e7da      	b.n	80050e2 <_free_r+0x22>
 800512c:	d902      	bls.n	8005134 <_free_r+0x74>
 800512e:	230c      	movs	r3, #12
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	e7d6      	b.n	80050e2 <_free_r+0x22>
 8005134:	6820      	ldr	r0, [r4, #0]
 8005136:	1821      	adds	r1, r4, r0
 8005138:	428b      	cmp	r3, r1
 800513a:	bf01      	itttt	eq
 800513c:	6819      	ldreq	r1, [r3, #0]
 800513e:	685b      	ldreq	r3, [r3, #4]
 8005140:	1809      	addeq	r1, r1, r0
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	6063      	str	r3, [r4, #4]
 8005146:	6054      	str	r4, [r2, #4]
 8005148:	e7cb      	b.n	80050e2 <_free_r+0x22>
 800514a:	bd38      	pop	{r3, r4, r5, pc}
 800514c:	200001a4 	.word	0x200001a4

08005150 <_read_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	4611      	mov	r1, r2
 8005158:	2200      	movs	r2, #0
 800515a:	4d05      	ldr	r5, [pc, #20]	; (8005170 <_read_r+0x20>)
 800515c:	602a      	str	r2, [r5, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	f7fd f803 	bl	800216a <_read>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_read_r+0x1e>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	b103      	cbz	r3, 800516e <_read_r+0x1e>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	200001ac 	.word	0x200001ac

08005174 <_fstat_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	2300      	movs	r3, #0
 8005178:	4d06      	ldr	r5, [pc, #24]	; (8005194 <_fstat_r+0x20>)
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	f7fd f81a 	bl	80021ba <_fstat>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d102      	bne.n	8005190 <_fstat_r+0x1c>
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	b103      	cbz	r3, 8005190 <_fstat_r+0x1c>
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	bd38      	pop	{r3, r4, r5, pc}
 8005192:	bf00      	nop
 8005194:	200001ac 	.word	0x200001ac

08005198 <_isatty_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	2300      	movs	r3, #0
 800519c:	4d05      	ldr	r5, [pc, #20]	; (80051b4 <_isatty_r+0x1c>)
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	f7fd f818 	bl	80021d8 <_isatty>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_isatty_r+0x1a>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_isatty_r+0x1a>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	200001ac 	.word	0x200001ac

080051b8 <_init>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr

080051c4 <_fini>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr
